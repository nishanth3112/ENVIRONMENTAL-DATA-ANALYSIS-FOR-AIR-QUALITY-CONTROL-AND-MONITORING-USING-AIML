{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/nishanth3112/ENVIRONMENTAL-DATA-ANALYSIS-FOR-AIR-QUALITY-CONTROL-AND-MONITORING-USING-AIML/blob/main/AIR%20QUALITY%20MONITORING%20USING%20MACHINE%20LEARNING%20ALGORITHMS\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install matplotlib-venn"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t1VjGwkHUR2t",
        "outputId": "4d5209dc-77ea-4036-9e0e-773d62251eb3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: matplotlib-venn in /usr/local/lib/python3.10/dist-packages (0.11.10)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from matplotlib-venn) (3.7.1)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from matplotlib-venn) (1.25.2)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from matplotlib-venn) (1.11.4)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->matplotlib-venn) (1.2.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->matplotlib-venn) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->matplotlib-venn) (4.50.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->matplotlib-venn) (1.4.5)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->matplotlib-venn) (24.0)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->matplotlib-venn) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->matplotlib-venn) (3.1.2)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib->matplotlib-venn) (2.8.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib->matplotlib-venn) (1.16.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WLYW-vWnb8zF",
        "outputId": "97b54ca7-2a87-4799-e79e-8528ddaf9ca6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (3.7.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.2.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (4.50.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.4.5)\n",
            "Requirement already satisfied: numpy>=1.20 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.25.2)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (24.0)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (3.1.2)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (2.8.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n"
          ]
        }
      ],
      "source": [
        "!pip install matplotlib"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "import seaborn as snc\n",
        "import tensorflow as tf\n",
        "from tensorflow.python.keras.models import Sequential\n",
        "from tensorflow.python.keras.layers import Dense\n",
        "#from tensorflow.python.keras.wrappers.scikit_learn import KerasRegressor\n",
        "from tensorflow.keras.applications import resnet\n",
        "from sklearn.model_selection import KFold\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from tensorflow.python.keras.layers.core import Dense, Activation"
      ],
      "metadata": {
        "id": "kjEeOLg2cZKC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "air_quality = pd.read_csv(\"/content/AirQualityUCI.csv\", sep=\";\", decimal=\",\")"
      ],
      "metadata": {
        "id": "4JJL6k4MceAy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "air_quality.dropna(axis=0, how= 'all', inplace=True)\n",
        "air_quality.dropna(axis=1, inplace=True)"
      ],
      "metadata": {
        "id": "WrI4NSIeckrH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "air_quality.replace(to_replace= -200, value= np.NaN, inplace= True)\n",
        "air_quality"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "hw20o4ikcq8V",
        "outputId": "bbb19222-07b2-44fb-c0d8-a2af34352880"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Date      Time  CO(GT)  PT08.S1(CO)  NMHC(GT)  C6H6(GT)  \\\n",
              "0     10/03/2004  18.00.00     2.6       1360.0     150.0      11.9   \n",
              "1     10/03/2004  19.00.00     2.0       1292.0     112.0       9.4   \n",
              "2     10/03/2004  20.00.00     2.2       1402.0      88.0       9.0   \n",
              "3     10/03/2004  21.00.00     2.2       1376.0      80.0       9.2   \n",
              "4     10/03/2004  22.00.00     1.6       1272.0      51.0       6.5   \n",
              "...          ...       ...     ...          ...       ...       ...   \n",
              "9352  04/04/2005  10.00.00     3.1       1314.0       NaN      13.5   \n",
              "9353  04/04/2005  11.00.00     2.4       1163.0       NaN      11.4   \n",
              "9354  04/04/2005  12.00.00     2.4       1142.0       NaN      12.4   \n",
              "9355  04/04/2005  13.00.00     2.1       1003.0       NaN       9.5   \n",
              "9356  04/04/2005  14.00.00     2.2       1071.0       NaN      11.9   \n",
              "\n",
              "      PT08.S2(NMHC)  NOx(GT)  PT08.S3(NOx)  NO2(GT)  PT08.S4(NO2)  \\\n",
              "0            1046.0    166.0        1056.0    113.0        1692.0   \n",
              "1             955.0    103.0        1174.0     92.0        1559.0   \n",
              "2             939.0    131.0        1140.0    114.0        1555.0   \n",
              "3             948.0    172.0        1092.0    122.0        1584.0   \n",
              "4             836.0    131.0        1205.0    116.0        1490.0   \n",
              "...             ...      ...           ...      ...           ...   \n",
              "9352         1101.0    472.0         539.0    190.0        1374.0   \n",
              "9353         1027.0    353.0         604.0    179.0        1264.0   \n",
              "9354         1063.0    293.0         603.0    175.0        1241.0   \n",
              "9355          961.0    235.0         702.0    156.0        1041.0   \n",
              "9356         1047.0    265.0         654.0    168.0        1129.0   \n",
              "\n",
              "      PT08.S5(O3)     T    RH      AH  \n",
              "0          1268.0  13.6  48.9  0.7578  \n",
              "1           972.0  13.3  47.7  0.7255  \n",
              "2          1074.0  11.9  54.0  0.7502  \n",
              "3          1203.0  11.0  60.0  0.7867  \n",
              "4          1110.0  11.2  59.6  0.7888  \n",
              "...           ...   ...   ...     ...  \n",
              "9352       1729.0  21.9  29.3  0.7568  \n",
              "9353       1269.0  24.3  23.7  0.7119  \n",
              "9354       1092.0  26.9  18.3  0.6406  \n",
              "9355        770.0  28.3  13.5  0.5139  \n",
              "9356        816.0  28.5  13.1  0.5028  \n",
              "\n",
              "[9357 rows x 15 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6514d3b8-f42c-4feb-8a4e-cd3b2695cacd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Time</th>\n",
              "      <th>CO(GT)</th>\n",
              "      <th>PT08.S1(CO)</th>\n",
              "      <th>NMHC(GT)</th>\n",
              "      <th>C6H6(GT)</th>\n",
              "      <th>PT08.S2(NMHC)</th>\n",
              "      <th>NOx(GT)</th>\n",
              "      <th>PT08.S3(NOx)</th>\n",
              "      <th>NO2(GT)</th>\n",
              "      <th>PT08.S4(NO2)</th>\n",
              "      <th>PT08.S5(O3)</th>\n",
              "      <th>T</th>\n",
              "      <th>RH</th>\n",
              "      <th>AH</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>10/03/2004</td>\n",
              "      <td>18.00.00</td>\n",
              "      <td>2.6</td>\n",
              "      <td>1360.0</td>\n",
              "      <td>150.0</td>\n",
              "      <td>11.9</td>\n",
              "      <td>1046.0</td>\n",
              "      <td>166.0</td>\n",
              "      <td>1056.0</td>\n",
              "      <td>113.0</td>\n",
              "      <td>1692.0</td>\n",
              "      <td>1268.0</td>\n",
              "      <td>13.6</td>\n",
              "      <td>48.9</td>\n",
              "      <td>0.7578</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>10/03/2004</td>\n",
              "      <td>19.00.00</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1292.0</td>\n",
              "      <td>112.0</td>\n",
              "      <td>9.4</td>\n",
              "      <td>955.0</td>\n",
              "      <td>103.0</td>\n",
              "      <td>1174.0</td>\n",
              "      <td>92.0</td>\n",
              "      <td>1559.0</td>\n",
              "      <td>972.0</td>\n",
              "      <td>13.3</td>\n",
              "      <td>47.7</td>\n",
              "      <td>0.7255</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>10/03/2004</td>\n",
              "      <td>20.00.00</td>\n",
              "      <td>2.2</td>\n",
              "      <td>1402.0</td>\n",
              "      <td>88.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>939.0</td>\n",
              "      <td>131.0</td>\n",
              "      <td>1140.0</td>\n",
              "      <td>114.0</td>\n",
              "      <td>1555.0</td>\n",
              "      <td>1074.0</td>\n",
              "      <td>11.9</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0.7502</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>10/03/2004</td>\n",
              "      <td>21.00.00</td>\n",
              "      <td>2.2</td>\n",
              "      <td>1376.0</td>\n",
              "      <td>80.0</td>\n",
              "      <td>9.2</td>\n",
              "      <td>948.0</td>\n",
              "      <td>172.0</td>\n",
              "      <td>1092.0</td>\n",
              "      <td>122.0</td>\n",
              "      <td>1584.0</td>\n",
              "      <td>1203.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>0.7867</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>10/03/2004</td>\n",
              "      <td>22.00.00</td>\n",
              "      <td>1.6</td>\n",
              "      <td>1272.0</td>\n",
              "      <td>51.0</td>\n",
              "      <td>6.5</td>\n",
              "      <td>836.0</td>\n",
              "      <td>131.0</td>\n",
              "      <td>1205.0</td>\n",
              "      <td>116.0</td>\n",
              "      <td>1490.0</td>\n",
              "      <td>1110.0</td>\n",
              "      <td>11.2</td>\n",
              "      <td>59.6</td>\n",
              "      <td>0.7888</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9352</th>\n",
              "      <td>04/04/2005</td>\n",
              "      <td>10.00.00</td>\n",
              "      <td>3.1</td>\n",
              "      <td>1314.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>13.5</td>\n",
              "      <td>1101.0</td>\n",
              "      <td>472.0</td>\n",
              "      <td>539.0</td>\n",
              "      <td>190.0</td>\n",
              "      <td>1374.0</td>\n",
              "      <td>1729.0</td>\n",
              "      <td>21.9</td>\n",
              "      <td>29.3</td>\n",
              "      <td>0.7568</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9353</th>\n",
              "      <td>04/04/2005</td>\n",
              "      <td>11.00.00</td>\n",
              "      <td>2.4</td>\n",
              "      <td>1163.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>11.4</td>\n",
              "      <td>1027.0</td>\n",
              "      <td>353.0</td>\n",
              "      <td>604.0</td>\n",
              "      <td>179.0</td>\n",
              "      <td>1264.0</td>\n",
              "      <td>1269.0</td>\n",
              "      <td>24.3</td>\n",
              "      <td>23.7</td>\n",
              "      <td>0.7119</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9354</th>\n",
              "      <td>04/04/2005</td>\n",
              "      <td>12.00.00</td>\n",
              "      <td>2.4</td>\n",
              "      <td>1142.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>12.4</td>\n",
              "      <td>1063.0</td>\n",
              "      <td>293.0</td>\n",
              "      <td>603.0</td>\n",
              "      <td>175.0</td>\n",
              "      <td>1241.0</td>\n",
              "      <td>1092.0</td>\n",
              "      <td>26.9</td>\n",
              "      <td>18.3</td>\n",
              "      <td>0.6406</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9355</th>\n",
              "      <td>04/04/2005</td>\n",
              "      <td>13.00.00</td>\n",
              "      <td>2.1</td>\n",
              "      <td>1003.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>9.5</td>\n",
              "      <td>961.0</td>\n",
              "      <td>235.0</td>\n",
              "      <td>702.0</td>\n",
              "      <td>156.0</td>\n",
              "      <td>1041.0</td>\n",
              "      <td>770.0</td>\n",
              "      <td>28.3</td>\n",
              "      <td>13.5</td>\n",
              "      <td>0.5139</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9356</th>\n",
              "      <td>04/04/2005</td>\n",
              "      <td>14.00.00</td>\n",
              "      <td>2.2</td>\n",
              "      <td>1071.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>11.9</td>\n",
              "      <td>1047.0</td>\n",
              "      <td>265.0</td>\n",
              "      <td>654.0</td>\n",
              "      <td>168.0</td>\n",
              "      <td>1129.0</td>\n",
              "      <td>816.0</td>\n",
              "      <td>28.5</td>\n",
              "      <td>13.1</td>\n",
              "      <td>0.5028</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>9357 rows × 15 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6514d3b8-f42c-4feb-8a4e-cd3b2695cacd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6514d3b8-f42c-4feb-8a4e-cd3b2695cacd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6514d3b8-f42c-4feb-8a4e-cd3b2695cacd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c5382b81-daa0-4ec7-ad71-54e93805f927\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c5382b81-daa0-4ec7-ad71-54e93805f927')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c5382b81-daa0-4ec7-ad71-54e93805f927 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "air_quality",
              "summary": "{\n  \"name\": \"air_quality\",\n  \"rows\": 9357,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 391,\n        \"samples\": [\n          \"19/03/2004\",\n          \"21/04/2004\",\n          \"12/04/2004\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Time\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 24,\n        \"samples\": [\n          \"02.00.00\",\n          \"10.00.00\",\n          \"18.00.00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CO(GT)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.4532520363373485,\n        \"min\": 0.1,\n        \"max\": 11.9,\n        \"num_unique_values\": 96,\n        \"samples\": [\n          9.2,\n          8.4,\n          7.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PT08.S1(CO)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 217.0800372559752,\n        \"min\": 647.0,\n        \"max\": 2040.0,\n        \"num_unique_values\": 1041,\n        \"samples\": [\n          1389.0,\n          861.0,\n          1819.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NMHC(GT)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 204.4599212564721,\n        \"min\": 7.0,\n        \"max\": 1189.0,\n        \"num_unique_values\": 429,\n        \"samples\": [\n          174.0,\n          32.0,\n          263.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"C6H6(GT)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.449819698300137,\n        \"min\": 0.1,\n        \"max\": 63.7,\n        \"num_unique_values\": 407,\n        \"samples\": [\n          9.7,\n          13.6,\n          35.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PT08.S2(NMHC)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 266.83142860197717,\n        \"min\": 383.0,\n        \"max\": 2214.0,\n        \"num_unique_values\": 1245,\n        \"samples\": [\n          995.0,\n          952.0,\n          1920.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NOx(GT)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 212.97916810358612,\n        \"min\": 2.0,\n        \"max\": 1479.0,\n        \"num_unique_values\": 925,\n        \"samples\": [\n          290.0,\n          704.0,\n          30.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PT08.S3(NOx)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 256.8173200157982,\n        \"min\": 322.0,\n        \"max\": 2683.0,\n        \"num_unique_values\": 1221,\n        \"samples\": [\n          1207.0,\n          1142.0,\n          949.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NO2(GT)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48.370107782225396,\n        \"min\": 2.0,\n        \"max\": 340.0,\n        \"num_unique_values\": 283,\n        \"samples\": [\n          34.0,\n          252.0,\n          50.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PT08.S4(NO2)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 346.20679352734425,\n        \"min\": 551.0,\n        \"max\": 2775.0,\n        \"num_unique_values\": 1603,\n        \"samples\": [\n          1275.0,\n          1222.0,\n          1648.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PT08.S5(O3)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 398.48428772146315,\n        \"min\": 221.0,\n        \"max\": 2523.0,\n        \"num_unique_values\": 1743,\n        \"samples\": [\n          703.0,\n          875.0,\n          873.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"T\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.832115731829768,\n        \"min\": -1.9,\n        \"max\": 44.6,\n        \"num_unique_values\": 436,\n        \"samples\": [\n          4.7,\n          23.3,\n          40.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17.316892462046205,\n        \"min\": 9.2,\n        \"max\": 88.7,\n        \"num_unique_values\": 753,\n        \"samples\": [\n          81.4,\n          14.8,\n          32.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4038126060476913,\n        \"min\": 0.1847,\n        \"max\": 2.231,\n        \"num_unique_values\": 6683,\n        \"samples\": [\n          1.5696,\n          0.7103,\n          1.0271\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert the entire DataFrame to numeric, excluding non-convertible values\n",
        "air_quality = air_quality.apply(pd.to_numeric, errors='coerce')\n",
        "\n",
        "# Fill NaN values with the mean\n",
        "air_quality.fillna(air_quality.mean(), inplace=True)"
      ],
      "metadata": {
        "id": "yQnhCijHc5T7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "air_quality.loc[:,'Date']=air_quality['Date']\n",
        "air_quality.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "KKTt0KaNc76G",
        "outputId": "57d8024d-8a54-4509-9632-8a598e2f5c61"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Date  Time  CO(GT)  PT08.S1(CO)  NMHC(GT)  C6H6(GT)  PT08.S2(NMHC)  \\\n",
              "0   NaN   NaN     2.6       1360.0     150.0      11.9         1046.0   \n",
              "1   NaN   NaN     2.0       1292.0     112.0       9.4          955.0   \n",
              "2   NaN   NaN     2.2       1402.0      88.0       9.0          939.0   \n",
              "3   NaN   NaN     2.2       1376.0      80.0       9.2          948.0   \n",
              "4   NaN   NaN     1.6       1272.0      51.0       6.5          836.0   \n",
              "\n",
              "   NOx(GT)  PT08.S3(NOx)  NO2(GT)  PT08.S4(NO2)  PT08.S5(O3)     T    RH  \\\n",
              "0    166.0        1056.0    113.0        1692.0       1268.0  13.6  48.9   \n",
              "1    103.0        1174.0     92.0        1559.0        972.0  13.3  47.7   \n",
              "2    131.0        1140.0    114.0        1555.0       1074.0  11.9  54.0   \n",
              "3    172.0        1092.0    122.0        1584.0       1203.0  11.0  60.0   \n",
              "4    131.0        1205.0    116.0        1490.0       1110.0  11.2  59.6   \n",
              "\n",
              "       AH  \n",
              "0  0.7578  \n",
              "1  0.7255  \n",
              "2  0.7502  \n",
              "3  0.7867  \n",
              "4  0.7888  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b5c87b42-a7d2-4238-b328-b4a355339192\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Time</th>\n",
              "      <th>CO(GT)</th>\n",
              "      <th>PT08.S1(CO)</th>\n",
              "      <th>NMHC(GT)</th>\n",
              "      <th>C6H6(GT)</th>\n",
              "      <th>PT08.S2(NMHC)</th>\n",
              "      <th>NOx(GT)</th>\n",
              "      <th>PT08.S3(NOx)</th>\n",
              "      <th>NO2(GT)</th>\n",
              "      <th>PT08.S4(NO2)</th>\n",
              "      <th>PT08.S5(O3)</th>\n",
              "      <th>T</th>\n",
              "      <th>RH</th>\n",
              "      <th>AH</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.6</td>\n",
              "      <td>1360.0</td>\n",
              "      <td>150.0</td>\n",
              "      <td>11.9</td>\n",
              "      <td>1046.0</td>\n",
              "      <td>166.0</td>\n",
              "      <td>1056.0</td>\n",
              "      <td>113.0</td>\n",
              "      <td>1692.0</td>\n",
              "      <td>1268.0</td>\n",
              "      <td>13.6</td>\n",
              "      <td>48.9</td>\n",
              "      <td>0.7578</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1292.0</td>\n",
              "      <td>112.0</td>\n",
              "      <td>9.4</td>\n",
              "      <td>955.0</td>\n",
              "      <td>103.0</td>\n",
              "      <td>1174.0</td>\n",
              "      <td>92.0</td>\n",
              "      <td>1559.0</td>\n",
              "      <td>972.0</td>\n",
              "      <td>13.3</td>\n",
              "      <td>47.7</td>\n",
              "      <td>0.7255</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.2</td>\n",
              "      <td>1402.0</td>\n",
              "      <td>88.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>939.0</td>\n",
              "      <td>131.0</td>\n",
              "      <td>1140.0</td>\n",
              "      <td>114.0</td>\n",
              "      <td>1555.0</td>\n",
              "      <td>1074.0</td>\n",
              "      <td>11.9</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0.7502</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.2</td>\n",
              "      <td>1376.0</td>\n",
              "      <td>80.0</td>\n",
              "      <td>9.2</td>\n",
              "      <td>948.0</td>\n",
              "      <td>172.0</td>\n",
              "      <td>1092.0</td>\n",
              "      <td>122.0</td>\n",
              "      <td>1584.0</td>\n",
              "      <td>1203.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>0.7867</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.6</td>\n",
              "      <td>1272.0</td>\n",
              "      <td>51.0</td>\n",
              "      <td>6.5</td>\n",
              "      <td>836.0</td>\n",
              "      <td>131.0</td>\n",
              "      <td>1205.0</td>\n",
              "      <td>116.0</td>\n",
              "      <td>1490.0</td>\n",
              "      <td>1110.0</td>\n",
              "      <td>11.2</td>\n",
              "      <td>59.6</td>\n",
              "      <td>0.7888</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b5c87b42-a7d2-4238-b328-b4a355339192')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b5c87b42-a7d2-4238-b328-b4a355339192 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b5c87b42-a7d2-4238-b328-b4a355339192');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e94c2538-0181-458b-8189-eea2fc78f850\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e94c2538-0181-458b-8189-eea2fc78f850')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e94c2538-0181-458b-8189-eea2fc78f850 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "air_quality",
              "summary": "{\n  \"name\": \"air_quality\",\n  \"rows\": 9357,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CO(GT)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3160683129140585,\n        \"min\": 0.1,\n        \"max\": 11.9,\n        \"num_unique_values\": 97,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PT08.S1(CO)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 212.79167185868545,\n        \"min\": 647.0,\n        \"max\": 2040.0,\n        \"num_unique_values\": 1042,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NMHC(GT)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 63.87022872344549,\n        \"min\": 7.0,\n        \"max\": 1189.0,\n        \"num_unique_values\": 430,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"C6H6(GT)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.302650251426649,\n        \"min\": 0.1,\n        \"max\": 63.7,\n        \"num_unique_values\": 408,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PT08.S2(NMHC)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 261.5602360971739,\n        \"min\": 383.0,\n        \"max\": 2214.0,\n        \"num_unique_values\": 1246,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NOx(GT)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 193.42663203750496,\n        \"min\": 2.0,\n        \"max\": 1479.0,\n        \"num_unique_values\": 926,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PT08.S3(NOx)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 251.74395388549033,\n        \"min\": 322.0,\n        \"max\": 2683.0,\n        \"num_unique_values\": 1222,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NO2(GT)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 43.92095410428009,\n        \"min\": 2.0,\n        \"max\": 340.0,\n        \"num_unique_values\": 284,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PT08.S4(NO2)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 339.36755924105825,\n        \"min\": 551.0,\n        \"max\": 2775.0,\n        \"num_unique_values\": 1604,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PT08.S5(O3)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 390.61232375633193,\n        \"min\": 221.0,\n        \"max\": 2523.0,\n        \"num_unique_values\": 1744,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"T\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.65763934990168,\n        \"min\": -1.9,\n        \"max\": 44.6,\n        \"num_unique_values\": 437,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.974801298982417,\n        \"min\": 9.2,\n        \"max\": 88.7,\n        \"num_unique_values\": 754,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.39583538239942767,\n        \"min\": 0.1847,\n        \"max\": 2.231,\n        \"num_unique_values\": 6684,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from datetime import datetime\n",
        "\n",
        "# Assuming air_quality is your DataFrame and 'Time' is the column causing the error\n",
        "# Convert 'Time' column to datetime objects using pd.to_datetime\n",
        "air_quality['Time'] = pd.to_datetime(air_quality['Time'], errors='coerce')\n",
        "\n",
        "# Display data types after conversion\n",
        "print(air_quality.dtypes)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KsjY5JOhdD80",
        "outputId": "5260fac0-1022-4d89-e877-2505c77a0131"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Date                    float64\n",
            "Time             datetime64[ns]\n",
            "CO(GT)                  float64\n",
            "PT08.S1(CO)             float64\n",
            "NMHC(GT)                float64\n",
            "C6H6(GT)                float64\n",
            "PT08.S2(NMHC)           float64\n",
            "NOx(GT)                 float64\n",
            "PT08.S3(NOx)            float64\n",
            "NO2(GT)                 float64\n",
            "PT08.S4(NO2)            float64\n",
            "PT08.S5(O3)             float64\n",
            "T                       float64\n",
            "RH                      float64\n",
            "AH                      float64\n",
            "dtype: object\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "air_quality['Date']=air_quality['Date'].astype(float)\n",
        "air_quality.dtypes\n",
        "air_quality"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "EfZi50VLdIs8",
        "outputId": "6b7d0eba-ae2c-40ca-b9e9-7b96ea2557e1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Date Time  CO(GT)  PT08.S1(CO)    NMHC(GT)  C6H6(GT)  PT08.S2(NMHC)  \\\n",
              "0      NaN  NaT     2.6       1360.0  150.000000      11.9         1046.0   \n",
              "1      NaN  NaT     2.0       1292.0  112.000000       9.4          955.0   \n",
              "2      NaN  NaT     2.2       1402.0   88.000000       9.0          939.0   \n",
              "3      NaN  NaT     2.2       1376.0   80.000000       9.2          948.0   \n",
              "4      NaN  NaT     1.6       1272.0   51.000000       6.5          836.0   \n",
              "...    ...  ...     ...          ...         ...       ...            ...   \n",
              "9352   NaN  NaT     3.1       1314.0  218.811816      13.5         1101.0   \n",
              "9353   NaN  NaT     2.4       1163.0  218.811816      11.4         1027.0   \n",
              "9354   NaN  NaT     2.4       1142.0  218.811816      12.4         1063.0   \n",
              "9355   NaN  NaT     2.1       1003.0  218.811816       9.5          961.0   \n",
              "9356   NaN  NaT     2.2       1071.0  218.811816      11.9         1047.0   \n",
              "\n",
              "      NOx(GT)  PT08.S3(NOx)  NO2(GT)  PT08.S4(NO2)  PT08.S5(O3)     T    RH  \\\n",
              "0       166.0        1056.0    113.0        1692.0       1268.0  13.6  48.9   \n",
              "1       103.0        1174.0     92.0        1559.0        972.0  13.3  47.7   \n",
              "2       131.0        1140.0    114.0        1555.0       1074.0  11.9  54.0   \n",
              "3       172.0        1092.0    122.0        1584.0       1203.0  11.0  60.0   \n",
              "4       131.0        1205.0    116.0        1490.0       1110.0  11.2  59.6   \n",
              "...       ...           ...      ...           ...          ...   ...   ...   \n",
              "9352    472.0         539.0    190.0        1374.0       1729.0  21.9  29.3   \n",
              "9353    353.0         604.0    179.0        1264.0       1269.0  24.3  23.7   \n",
              "9354    293.0         603.0    175.0        1241.0       1092.0  26.9  18.3   \n",
              "9355    235.0         702.0    156.0        1041.0        770.0  28.3  13.5   \n",
              "9356    265.0         654.0    168.0        1129.0        816.0  28.5  13.1   \n",
              "\n",
              "          AH  \n",
              "0     0.7578  \n",
              "1     0.7255  \n",
              "2     0.7502  \n",
              "3     0.7867  \n",
              "4     0.7888  \n",
              "...      ...  \n",
              "9352  0.7568  \n",
              "9353  0.7119  \n",
              "9354  0.6406  \n",
              "9355  0.5139  \n",
              "9356  0.5028  \n",
              "\n",
              "[9357 rows x 15 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a1b59d0e-9804-4973-9655-a97b0c78a7cf\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Time</th>\n",
              "      <th>CO(GT)</th>\n",
              "      <th>PT08.S1(CO)</th>\n",
              "      <th>NMHC(GT)</th>\n",
              "      <th>C6H6(GT)</th>\n",
              "      <th>PT08.S2(NMHC)</th>\n",
              "      <th>NOx(GT)</th>\n",
              "      <th>PT08.S3(NOx)</th>\n",
              "      <th>NO2(GT)</th>\n",
              "      <th>PT08.S4(NO2)</th>\n",
              "      <th>PT08.S5(O3)</th>\n",
              "      <th>T</th>\n",
              "      <th>RH</th>\n",
              "      <th>AH</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>2.6</td>\n",
              "      <td>1360.0</td>\n",
              "      <td>150.000000</td>\n",
              "      <td>11.9</td>\n",
              "      <td>1046.0</td>\n",
              "      <td>166.0</td>\n",
              "      <td>1056.0</td>\n",
              "      <td>113.0</td>\n",
              "      <td>1692.0</td>\n",
              "      <td>1268.0</td>\n",
              "      <td>13.6</td>\n",
              "      <td>48.9</td>\n",
              "      <td>0.7578</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1292.0</td>\n",
              "      <td>112.000000</td>\n",
              "      <td>9.4</td>\n",
              "      <td>955.0</td>\n",
              "      <td>103.0</td>\n",
              "      <td>1174.0</td>\n",
              "      <td>92.0</td>\n",
              "      <td>1559.0</td>\n",
              "      <td>972.0</td>\n",
              "      <td>13.3</td>\n",
              "      <td>47.7</td>\n",
              "      <td>0.7255</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>2.2</td>\n",
              "      <td>1402.0</td>\n",
              "      <td>88.000000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>939.0</td>\n",
              "      <td>131.0</td>\n",
              "      <td>1140.0</td>\n",
              "      <td>114.0</td>\n",
              "      <td>1555.0</td>\n",
              "      <td>1074.0</td>\n",
              "      <td>11.9</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0.7502</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>2.2</td>\n",
              "      <td>1376.0</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>9.2</td>\n",
              "      <td>948.0</td>\n",
              "      <td>172.0</td>\n",
              "      <td>1092.0</td>\n",
              "      <td>122.0</td>\n",
              "      <td>1584.0</td>\n",
              "      <td>1203.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>0.7867</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>1.6</td>\n",
              "      <td>1272.0</td>\n",
              "      <td>51.000000</td>\n",
              "      <td>6.5</td>\n",
              "      <td>836.0</td>\n",
              "      <td>131.0</td>\n",
              "      <td>1205.0</td>\n",
              "      <td>116.0</td>\n",
              "      <td>1490.0</td>\n",
              "      <td>1110.0</td>\n",
              "      <td>11.2</td>\n",
              "      <td>59.6</td>\n",
              "      <td>0.7888</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9352</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>3.1</td>\n",
              "      <td>1314.0</td>\n",
              "      <td>218.811816</td>\n",
              "      <td>13.5</td>\n",
              "      <td>1101.0</td>\n",
              "      <td>472.0</td>\n",
              "      <td>539.0</td>\n",
              "      <td>190.0</td>\n",
              "      <td>1374.0</td>\n",
              "      <td>1729.0</td>\n",
              "      <td>21.9</td>\n",
              "      <td>29.3</td>\n",
              "      <td>0.7568</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9353</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>2.4</td>\n",
              "      <td>1163.0</td>\n",
              "      <td>218.811816</td>\n",
              "      <td>11.4</td>\n",
              "      <td>1027.0</td>\n",
              "      <td>353.0</td>\n",
              "      <td>604.0</td>\n",
              "      <td>179.0</td>\n",
              "      <td>1264.0</td>\n",
              "      <td>1269.0</td>\n",
              "      <td>24.3</td>\n",
              "      <td>23.7</td>\n",
              "      <td>0.7119</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9354</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>2.4</td>\n",
              "      <td>1142.0</td>\n",
              "      <td>218.811816</td>\n",
              "      <td>12.4</td>\n",
              "      <td>1063.0</td>\n",
              "      <td>293.0</td>\n",
              "      <td>603.0</td>\n",
              "      <td>175.0</td>\n",
              "      <td>1241.0</td>\n",
              "      <td>1092.0</td>\n",
              "      <td>26.9</td>\n",
              "      <td>18.3</td>\n",
              "      <td>0.6406</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9355</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>2.1</td>\n",
              "      <td>1003.0</td>\n",
              "      <td>218.811816</td>\n",
              "      <td>9.5</td>\n",
              "      <td>961.0</td>\n",
              "      <td>235.0</td>\n",
              "      <td>702.0</td>\n",
              "      <td>156.0</td>\n",
              "      <td>1041.0</td>\n",
              "      <td>770.0</td>\n",
              "      <td>28.3</td>\n",
              "      <td>13.5</td>\n",
              "      <td>0.5139</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9356</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>2.2</td>\n",
              "      <td>1071.0</td>\n",
              "      <td>218.811816</td>\n",
              "      <td>11.9</td>\n",
              "      <td>1047.0</td>\n",
              "      <td>265.0</td>\n",
              "      <td>654.0</td>\n",
              "      <td>168.0</td>\n",
              "      <td>1129.0</td>\n",
              "      <td>816.0</td>\n",
              "      <td>28.5</td>\n",
              "      <td>13.1</td>\n",
              "      <td>0.5028</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>9357 rows × 15 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a1b59d0e-9804-4973-9655-a97b0c78a7cf')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a1b59d0e-9804-4973-9655-a97b0c78a7cf button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a1b59d0e-9804-4973-9655-a97b0c78a7cf');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0c9b05d4-d891-4093-a9d2-b9b0b6c6f5cd\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0c9b05d4-d891-4093-a9d2-b9b0b6c6f5cd')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0c9b05d4-d891-4093-a9d2-b9b0b6c6f5cd button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "air_quality",
              "summary": "{\n  \"name\": \"air_quality\",\n  \"rows\": 9357,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Time\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"NaT\",\n        \"max\": \"NaT\",\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CO(GT)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3160683129140585,\n        \"min\": 0.1,\n        \"max\": 11.9,\n        \"num_unique_values\": 97,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PT08.S1(CO)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 212.79167185868545,\n        \"min\": 647.0,\n        \"max\": 2040.0,\n        \"num_unique_values\": 1042,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NMHC(GT)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 63.87022872344549,\n        \"min\": 7.0,\n        \"max\": 1189.0,\n        \"num_unique_values\": 430,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"C6H6(GT)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.302650251426649,\n        \"min\": 0.1,\n        \"max\": 63.7,\n        \"num_unique_values\": 408,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PT08.S2(NMHC)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 261.5602360971739,\n        \"min\": 383.0,\n        \"max\": 2214.0,\n        \"num_unique_values\": 1246,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NOx(GT)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 193.42663203750496,\n        \"min\": 2.0,\n        \"max\": 1479.0,\n        \"num_unique_values\": 926,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PT08.S3(NOx)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 251.74395388549033,\n        \"min\": 322.0,\n        \"max\": 2683.0,\n        \"num_unique_values\": 1222,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NO2(GT)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 43.92095410428009,\n        \"min\": 2.0,\n        \"max\": 340.0,\n        \"num_unique_values\": 284,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PT08.S4(NO2)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 339.36755924105825,\n        \"min\": 551.0,\n        \"max\": 2775.0,\n        \"num_unique_values\": 1604,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PT08.S5(O3)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 390.61232375633193,\n        \"min\": 221.0,\n        \"max\": 2523.0,\n        \"num_unique_values\": 1744,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"T\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.65763934990168,\n        \"min\": -1.9,\n        \"max\": 44.6,\n        \"num_unique_values\": 437,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.974801298982417,\n        \"min\": 9.2,\n        \"max\": 88.7,\n        \"num_unique_values\": 754,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.39583538239942767,\n        \"min\": 0.1847,\n        \"max\": 2.231,\n        \"num_unique_values\": 6684,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " air_quality.loc[:,'Time']=air_quality['Time']"
      ],
      "metadata": {
        "id": "ZZD5Pxf3dM4f"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from datetime import datetime\n",
        "\n",
        "# Assuming air_quality is your DataFrame and 'Time' is the column causing the error\n",
        "# Convert 'Time' column to datetime objects using pd.to_datetime\n",
        "air_quality['Time'] = pd.to_datetime(air_quality['Time'], errors='coerce')\n",
        "\n",
        "# Display data types after conversion\n",
        "print(air_quality.dtypes)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hdz8k46ndNry",
        "outputId": "99ccfad9-209e-433f-880c-1784f4b64f44"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Date                    float64\n",
            "Time             datetime64[ns]\n",
            "CO(GT)                  float64\n",
            "PT08.S1(CO)             float64\n",
            "NMHC(GT)                float64\n",
            "C6H6(GT)                float64\n",
            "PT08.S2(NMHC)           float64\n",
            "NOx(GT)                 float64\n",
            "PT08.S3(NOx)            float64\n",
            "NO2(GT)                 float64\n",
            "PT08.S4(NO2)            float64\n",
            "PT08.S5(O3)             float64\n",
            "T                       float64\n",
            "RH                      float64\n",
            "AH                      float64\n",
            "dtype: object\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "air_quality.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "qDoMr6frdPur",
        "outputId": "8c61e400-71c6-422c-fce4-b425ab1f1b19"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Date Time  CO(GT)  PT08.S1(CO)    NMHC(GT)  C6H6(GT)  PT08.S2(NMHC)  \\\n",
              "9352   NaN  NaT     3.1       1314.0  218.811816      13.5         1101.0   \n",
              "9353   NaN  NaT     2.4       1163.0  218.811816      11.4         1027.0   \n",
              "9354   NaN  NaT     2.4       1142.0  218.811816      12.4         1063.0   \n",
              "9355   NaN  NaT     2.1       1003.0  218.811816       9.5          961.0   \n",
              "9356   NaN  NaT     2.2       1071.0  218.811816      11.9         1047.0   \n",
              "\n",
              "      NOx(GT)  PT08.S3(NOx)  NO2(GT)  PT08.S4(NO2)  PT08.S5(O3)     T    RH  \\\n",
              "9352    472.0         539.0    190.0        1374.0       1729.0  21.9  29.3   \n",
              "9353    353.0         604.0    179.0        1264.0       1269.0  24.3  23.7   \n",
              "9354    293.0         603.0    175.0        1241.0       1092.0  26.9  18.3   \n",
              "9355    235.0         702.0    156.0        1041.0        770.0  28.3  13.5   \n",
              "9356    265.0         654.0    168.0        1129.0        816.0  28.5  13.1   \n",
              "\n",
              "          AH  \n",
              "9352  0.7568  \n",
              "9353  0.7119  \n",
              "9354  0.6406  \n",
              "9355  0.5139  \n",
              "9356  0.5028  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d7100466-449e-40cb-bcc5-5600cc14682a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Time</th>\n",
              "      <th>CO(GT)</th>\n",
              "      <th>PT08.S1(CO)</th>\n",
              "      <th>NMHC(GT)</th>\n",
              "      <th>C6H6(GT)</th>\n",
              "      <th>PT08.S2(NMHC)</th>\n",
              "      <th>NOx(GT)</th>\n",
              "      <th>PT08.S3(NOx)</th>\n",
              "      <th>NO2(GT)</th>\n",
              "      <th>PT08.S4(NO2)</th>\n",
              "      <th>PT08.S5(O3)</th>\n",
              "      <th>T</th>\n",
              "      <th>RH</th>\n",
              "      <th>AH</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>9352</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>3.1</td>\n",
              "      <td>1314.0</td>\n",
              "      <td>218.811816</td>\n",
              "      <td>13.5</td>\n",
              "      <td>1101.0</td>\n",
              "      <td>472.0</td>\n",
              "      <td>539.0</td>\n",
              "      <td>190.0</td>\n",
              "      <td>1374.0</td>\n",
              "      <td>1729.0</td>\n",
              "      <td>21.9</td>\n",
              "      <td>29.3</td>\n",
              "      <td>0.7568</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9353</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>2.4</td>\n",
              "      <td>1163.0</td>\n",
              "      <td>218.811816</td>\n",
              "      <td>11.4</td>\n",
              "      <td>1027.0</td>\n",
              "      <td>353.0</td>\n",
              "      <td>604.0</td>\n",
              "      <td>179.0</td>\n",
              "      <td>1264.0</td>\n",
              "      <td>1269.0</td>\n",
              "      <td>24.3</td>\n",
              "      <td>23.7</td>\n",
              "      <td>0.7119</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9354</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>2.4</td>\n",
              "      <td>1142.0</td>\n",
              "      <td>218.811816</td>\n",
              "      <td>12.4</td>\n",
              "      <td>1063.0</td>\n",
              "      <td>293.0</td>\n",
              "      <td>603.0</td>\n",
              "      <td>175.0</td>\n",
              "      <td>1241.0</td>\n",
              "      <td>1092.0</td>\n",
              "      <td>26.9</td>\n",
              "      <td>18.3</td>\n",
              "      <td>0.6406</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9355</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>2.1</td>\n",
              "      <td>1003.0</td>\n",
              "      <td>218.811816</td>\n",
              "      <td>9.5</td>\n",
              "      <td>961.0</td>\n",
              "      <td>235.0</td>\n",
              "      <td>702.0</td>\n",
              "      <td>156.0</td>\n",
              "      <td>1041.0</td>\n",
              "      <td>770.0</td>\n",
              "      <td>28.3</td>\n",
              "      <td>13.5</td>\n",
              "      <td>0.5139</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9356</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>2.2</td>\n",
              "      <td>1071.0</td>\n",
              "      <td>218.811816</td>\n",
              "      <td>11.9</td>\n",
              "      <td>1047.0</td>\n",
              "      <td>265.0</td>\n",
              "      <td>654.0</td>\n",
              "      <td>168.0</td>\n",
              "      <td>1129.0</td>\n",
              "      <td>816.0</td>\n",
              "      <td>28.5</td>\n",
              "      <td>13.1</td>\n",
              "      <td>0.5028</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d7100466-449e-40cb-bcc5-5600cc14682a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d7100466-449e-40cb-bcc5-5600cc14682a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d7100466-449e-40cb-bcc5-5600cc14682a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fe687e21-8b3c-4c74-bf11-4da9b1622195\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fe687e21-8b3c-4c74-bf11-4da9b1622195')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fe687e21-8b3c-4c74-bf11-4da9b1622195 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"air_quality\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Time\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"NaT\",\n        \"max\": \"NaT\",\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CO(GT)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.39115214431215894,\n        \"min\": 2.1,\n        \"max\": 3.1,\n        \"num_unique_values\": 4,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PT08.S1(CO)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 116.54312506535939,\n        \"min\": 1003.0,\n        \"max\": 1314.0,\n        \"num_unique_values\": 5,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NMHC(GT)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 218.81181619256017,\n        \"max\": 218.81181619256017,\n        \"num_unique_values\": 1,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"C6H6(GT)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.4741099009232657,\n        \"min\": 9.5,\n        \"max\": 13.5,\n        \"num_unique_values\": 5,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PT08.S2(NMHC)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.741665995597785,\n        \"min\": 961.0,\n        \"max\": 1101.0,\n        \"num_unique_values\": 5,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NOx(GT)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 93.68457717255279,\n        \"min\": 235.0,\n        \"max\": 472.0,\n        \"num_unique_values\": 5,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PT08.S3(NOx)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 61.20702574051446,\n        \"min\": 539.0,\n        \"max\": 702.0,\n        \"num_unique_values\": 5,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NO2(GT)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.660963628413123,\n        \"min\": 156.0,\n        \"max\": 190.0,\n        \"num_unique_values\": 5,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PT08.S4(NO2)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 128.34991234901565,\n        \"min\": 1041.0,\n        \"max\": 1374.0,\n        \"num_unique_values\": 5,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PT08.S5(O3)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 389.75210069991925,\n        \"min\": 770.0,\n        \"max\": 1729.0,\n        \"num_unique_values\": 5,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"T\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.830547650190684,\n        \"min\": 21.9,\n        \"max\": 28.5,\n        \"num_unique_values\": 5,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.929069201559471,\n        \"min\": 13.1,\n        \"max\": 29.3,\n        \"num_unique_values\": 5,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.11450115719939252,\n        \"min\": 0.5028,\n        \"max\": 0.7568,\n        \"num_unique_values\": 5,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "air_quality2=air_quality.corr('pearson')\n",
        "air_quality2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 539
        },
        "id": "H3IRkBpbdTF_",
        "outputId": "d6a1b99c-0910-4a3a-fc88-4bd8c07e5203"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               Date  Time    CO(GT)  PT08.S1(CO)  NMHC(GT)  C6H6(GT)  \\\n",
              "Date            NaN   NaN       NaN          NaN       NaN       NaN   \n",
              "Time            NaN   NaN       NaN          NaN       NaN       NaN   \n",
              "CO(GT)          NaN   NaN  1.000000     0.773394  0.289975  0.812361   \n",
              "PT08.S1(CO)     NaN   NaN  0.773394     1.000000  0.278282  0.883795   \n",
              "NMHC(GT)        NaN   NaN  0.289975     0.278282  1.000000  0.281928   \n",
              "C6H6(GT)        NaN   NaN  0.812361     0.883795  0.281928  1.000000   \n",
              "PT08.S2(NMHC)   NaN   NaN  0.795578     0.892964  0.279761  0.981950   \n",
              "NOx(GT)         NaN   NaN  0.762273     0.615941  0.098180  0.616801   \n",
              "PT08.S3(NOx)    NaN   NaN -0.613877    -0.771938 -0.261997 -0.735744   \n",
              "NO2(GT)         NaN   NaN  0.646349     0.562843  0.156510  0.535919   \n",
              "PT08.S4(NO2)    NaN   NaN  0.558232     0.682881  0.232979  0.765731   \n",
              "PT08.S5(O3)     NaN   NaN  0.759027     0.899324  0.240592  0.865689   \n",
              "T               NaN   NaN  0.020257     0.048627  0.066782  0.198956   \n",
              "RH              NaN   NaN  0.043198     0.114606 -0.052784 -0.061681   \n",
              "AH              NaN   NaN  0.043274     0.135324  0.037173  0.167972   \n",
              "\n",
              "               PT08.S2(NMHC)   NOx(GT)  PT08.S3(NOx)   NO2(GT)  PT08.S4(NO2)  \\\n",
              "Date                     NaN       NaN           NaN       NaN           NaN   \n",
              "Time                     NaN       NaN           NaN       NaN           NaN   \n",
              "CO(GT)              0.795578  0.762273     -0.613877  0.646349      0.558232   \n",
              "PT08.S1(CO)         0.892964  0.615941     -0.771938  0.562843      0.682881   \n",
              "NMHC(GT)            0.279761  0.098180     -0.261997  0.156510      0.232979   \n",
              "C6H6(GT)            0.981950  0.616801     -0.735744  0.535919      0.765731   \n",
              "PT08.S2(NMHC)       1.000000  0.601773     -0.796703  0.561180      0.777254   \n",
              "NOx(GT)             0.601773  1.000000     -0.563270  0.763074      0.205485   \n",
              "PT08.S3(NOx)       -0.796703 -0.563270      1.000000 -0.569479     -0.538468   \n",
              "NO2(GT)             0.561180  0.763074     -0.569479  1.000000      0.140655   \n",
              "PT08.S4(NO2)        0.777254  0.205485     -0.538468  0.140655      1.000000   \n",
              "PT08.S5(O3)         0.880578  0.688205     -0.796569  0.629443      0.591144   \n",
              "T                   0.241373 -0.235636     -0.145112 -0.165466      0.561270   \n",
              "RH                 -0.090380  0.192587     -0.056740 -0.080569     -0.032188   \n",
              "AH                  0.186933 -0.126868     -0.232017 -0.291392      0.629641   \n",
              "\n",
              "               PT08.S5(O3)         T        RH        AH  \n",
              "Date                   NaN       NaN       NaN       NaN  \n",
              "Time                   NaN       NaN       NaN       NaN  \n",
              "CO(GT)            0.759027  0.020257  0.043198  0.043274  \n",
              "PT08.S1(CO)       0.899324  0.048627  0.114606  0.135324  \n",
              "NMHC(GT)          0.240592  0.066782 -0.052784  0.037173  \n",
              "C6H6(GT)          0.865689  0.198956 -0.061681  0.167972  \n",
              "PT08.S2(NMHC)     0.880578  0.241373 -0.090380  0.186933  \n",
              "NOx(GT)           0.688205 -0.235636  0.192587 -0.126868  \n",
              "PT08.S3(NOx)     -0.796569 -0.145112 -0.056740 -0.232017  \n",
              "NO2(GT)           0.629443 -0.165466 -0.080569 -0.291392  \n",
              "PT08.S4(NO2)      0.591144  0.561270 -0.032188  0.629641  \n",
              "PT08.S5(O3)       1.000000 -0.027172  0.124956  0.070751  \n",
              "T                -0.027172  1.000000 -0.578621  0.656397  \n",
              "RH                0.124956 -0.578621  1.000000  0.167971  \n",
              "AH                0.070751  0.656397  0.167971  1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d269b37e-4d3e-40da-8810-f24d7a02289e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Time</th>\n",
              "      <th>CO(GT)</th>\n",
              "      <th>PT08.S1(CO)</th>\n",
              "      <th>NMHC(GT)</th>\n",
              "      <th>C6H6(GT)</th>\n",
              "      <th>PT08.S2(NMHC)</th>\n",
              "      <th>NOx(GT)</th>\n",
              "      <th>PT08.S3(NOx)</th>\n",
              "      <th>NO2(GT)</th>\n",
              "      <th>PT08.S4(NO2)</th>\n",
              "      <th>PT08.S5(O3)</th>\n",
              "      <th>T</th>\n",
              "      <th>RH</th>\n",
              "      <th>AH</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Time</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CO(GT)</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.773394</td>\n",
              "      <td>0.289975</td>\n",
              "      <td>0.812361</td>\n",
              "      <td>0.795578</td>\n",
              "      <td>0.762273</td>\n",
              "      <td>-0.613877</td>\n",
              "      <td>0.646349</td>\n",
              "      <td>0.558232</td>\n",
              "      <td>0.759027</td>\n",
              "      <td>0.020257</td>\n",
              "      <td>0.043198</td>\n",
              "      <td>0.043274</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PT08.S1(CO)</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.773394</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.278282</td>\n",
              "      <td>0.883795</td>\n",
              "      <td>0.892964</td>\n",
              "      <td>0.615941</td>\n",
              "      <td>-0.771938</td>\n",
              "      <td>0.562843</td>\n",
              "      <td>0.682881</td>\n",
              "      <td>0.899324</td>\n",
              "      <td>0.048627</td>\n",
              "      <td>0.114606</td>\n",
              "      <td>0.135324</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>NMHC(GT)</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.289975</td>\n",
              "      <td>0.278282</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.281928</td>\n",
              "      <td>0.279761</td>\n",
              "      <td>0.098180</td>\n",
              "      <td>-0.261997</td>\n",
              "      <td>0.156510</td>\n",
              "      <td>0.232979</td>\n",
              "      <td>0.240592</td>\n",
              "      <td>0.066782</td>\n",
              "      <td>-0.052784</td>\n",
              "      <td>0.037173</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C6H6(GT)</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.812361</td>\n",
              "      <td>0.883795</td>\n",
              "      <td>0.281928</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.981950</td>\n",
              "      <td>0.616801</td>\n",
              "      <td>-0.735744</td>\n",
              "      <td>0.535919</td>\n",
              "      <td>0.765731</td>\n",
              "      <td>0.865689</td>\n",
              "      <td>0.198956</td>\n",
              "      <td>-0.061681</td>\n",
              "      <td>0.167972</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PT08.S2(NMHC)</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.795578</td>\n",
              "      <td>0.892964</td>\n",
              "      <td>0.279761</td>\n",
              "      <td>0.981950</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.601773</td>\n",
              "      <td>-0.796703</td>\n",
              "      <td>0.561180</td>\n",
              "      <td>0.777254</td>\n",
              "      <td>0.880578</td>\n",
              "      <td>0.241373</td>\n",
              "      <td>-0.090380</td>\n",
              "      <td>0.186933</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>NOx(GT)</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.762273</td>\n",
              "      <td>0.615941</td>\n",
              "      <td>0.098180</td>\n",
              "      <td>0.616801</td>\n",
              "      <td>0.601773</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.563270</td>\n",
              "      <td>0.763074</td>\n",
              "      <td>0.205485</td>\n",
              "      <td>0.688205</td>\n",
              "      <td>-0.235636</td>\n",
              "      <td>0.192587</td>\n",
              "      <td>-0.126868</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PT08.S3(NOx)</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-0.613877</td>\n",
              "      <td>-0.771938</td>\n",
              "      <td>-0.261997</td>\n",
              "      <td>-0.735744</td>\n",
              "      <td>-0.796703</td>\n",
              "      <td>-0.563270</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.569479</td>\n",
              "      <td>-0.538468</td>\n",
              "      <td>-0.796569</td>\n",
              "      <td>-0.145112</td>\n",
              "      <td>-0.056740</td>\n",
              "      <td>-0.232017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>NO2(GT)</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.646349</td>\n",
              "      <td>0.562843</td>\n",
              "      <td>0.156510</td>\n",
              "      <td>0.535919</td>\n",
              "      <td>0.561180</td>\n",
              "      <td>0.763074</td>\n",
              "      <td>-0.569479</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.140655</td>\n",
              "      <td>0.629443</td>\n",
              "      <td>-0.165466</td>\n",
              "      <td>-0.080569</td>\n",
              "      <td>-0.291392</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PT08.S4(NO2)</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.558232</td>\n",
              "      <td>0.682881</td>\n",
              "      <td>0.232979</td>\n",
              "      <td>0.765731</td>\n",
              "      <td>0.777254</td>\n",
              "      <td>0.205485</td>\n",
              "      <td>-0.538468</td>\n",
              "      <td>0.140655</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.591144</td>\n",
              "      <td>0.561270</td>\n",
              "      <td>-0.032188</td>\n",
              "      <td>0.629641</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PT08.S5(O3)</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.759027</td>\n",
              "      <td>0.899324</td>\n",
              "      <td>0.240592</td>\n",
              "      <td>0.865689</td>\n",
              "      <td>0.880578</td>\n",
              "      <td>0.688205</td>\n",
              "      <td>-0.796569</td>\n",
              "      <td>0.629443</td>\n",
              "      <td>0.591144</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.027172</td>\n",
              "      <td>0.124956</td>\n",
              "      <td>0.070751</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>T</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.020257</td>\n",
              "      <td>0.048627</td>\n",
              "      <td>0.066782</td>\n",
              "      <td>0.198956</td>\n",
              "      <td>0.241373</td>\n",
              "      <td>-0.235636</td>\n",
              "      <td>-0.145112</td>\n",
              "      <td>-0.165466</td>\n",
              "      <td>0.561270</td>\n",
              "      <td>-0.027172</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.578621</td>\n",
              "      <td>0.656397</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RH</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.043198</td>\n",
              "      <td>0.114606</td>\n",
              "      <td>-0.052784</td>\n",
              "      <td>-0.061681</td>\n",
              "      <td>-0.090380</td>\n",
              "      <td>0.192587</td>\n",
              "      <td>-0.056740</td>\n",
              "      <td>-0.080569</td>\n",
              "      <td>-0.032188</td>\n",
              "      <td>0.124956</td>\n",
              "      <td>-0.578621</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.167971</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AH</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.043274</td>\n",
              "      <td>0.135324</td>\n",
              "      <td>0.037173</td>\n",
              "      <td>0.167972</td>\n",
              "      <td>0.186933</td>\n",
              "      <td>-0.126868</td>\n",
              "      <td>-0.232017</td>\n",
              "      <td>-0.291392</td>\n",
              "      <td>0.629641</td>\n",
              "      <td>0.070751</td>\n",
              "      <td>0.656397</td>\n",
              "      <td>0.167971</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d269b37e-4d3e-40da-8810-f24d7a02289e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d269b37e-4d3e-40da-8810-f24d7a02289e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d269b37e-4d3e-40da-8810-f24d7a02289e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d434b978-2e9b-4402-a13c-bf1b8a124996\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d434b978-2e9b-4402-a13c-bf1b8a124996')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d434b978-2e9b-4402-a13c-bf1b8a124996 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "air_quality2",
              "summary": "{\n  \"name\": \"air_quality2\",\n  \"rows\": 15,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CO(GT)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.463141809830764,\n        \"min\": -0.6138770496427729,\n        \"max\": 1.0,\n        \"num_unique_values\": 13,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PT08.S1(CO)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4981349998896475,\n        \"min\": -0.7719384679420065,\n        \"max\": 1.0,\n        \"num_unique_values\": 13,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NMHC(GT)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28921152972816955,\n        \"min\": -0.26199723239578504,\n        \"max\": 1.0,\n        \"num_unique_values\": 13,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"C6H6(GT)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.502885206971068,\n        \"min\": -0.7357441198223562,\n        \"max\": 1.0,\n        \"num_unique_values\": 13,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PT08.S2(NMHC)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5164425390602838,\n        \"min\": -0.7967033835149516,\n        \"max\": 1.0,\n        \"num_unique_values\": 13,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NOx(GT)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4651101781193414,\n        \"min\": -0.5632703509927856,\n        \"max\": 1.0,\n        \"num_unique_values\": 13,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PT08.S3(NOx)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.48947130187986504,\n        \"min\": -0.7967033835149516,\n        \"max\": 1.0,\n        \"num_unique_values\": 13,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NO2(GT)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.46896046248452794,\n        \"min\": -0.5694787532430368,\n        \"max\": 1.0,\n        \"num_unique_values\": 13,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PT08.S4(NO2)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4129289408765916,\n        \"min\": -0.5384678766555856,\n        \"max\": 1.0,\n        \"num_unique_values\": 13,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PT08.S5(O3)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5116529356262428,\n        \"min\": -0.7965691609602692,\n        \"max\": 1.0,\n        \"num_unique_values\": 13,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"T\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.41664847282177647,\n        \"min\": -0.5786208353974117,\n        \"max\": 1.0,\n        \"num_unique_values\": 13,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3439435487757187,\n        \"min\": -0.5786208353974117,\n        \"max\": 1.0,\n        \"num_unique_values\": 13,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.36970480854325616,\n        \"min\": -0.2913920974348802,\n        \"max\": 1.0,\n        \"num_unique_values\": 13,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "abs(air_quality2['T']).sort_values(ascending=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ymzd5Ldedb8M",
        "outputId": "3bcb75c1-3888-41a7-9cff-4673658607e1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "T                1.000000\n",
              "AH               0.656397\n",
              "RH               0.578621\n",
              "PT08.S4(NO2)     0.561270\n",
              "PT08.S2(NMHC)    0.241373\n",
              "NOx(GT)          0.235636\n",
              "C6H6(GT)         0.198956\n",
              "NO2(GT)          0.165466\n",
              "PT08.S3(NOx)     0.145112\n",
              "NMHC(GT)         0.066782\n",
              "PT08.S1(CO)      0.048627\n",
              "PT08.S5(O3)      0.027172\n",
              "CO(GT)           0.020257\n",
              "Date                  NaN\n",
              "Time                  NaN\n",
              "Name: T, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import MinMaxScaler"
      ],
      "metadata": {
        "id": "zBW1T32vdeko"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# num = air_quality.keys()\n",
        "# scaler = MinMaxScaler()\n",
        "# scaler.fit(air_quality[num])\n",
        "# air_quality[num] = scaler.transform(air_quality[num])"
      ],
      "metadata": {
        "id": "872Ihhaidhdb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "features=air_quality\n",
        "target=air_quality['T']"
      ],
      "metadata": {
        "id": "OHuMttWsdies"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "features=features.drop('Date',axis=1)\n",
        "features=features.drop('Time',axis=1)\n",
        "features=features.drop('T',axis=1)\n",
        "features=features.drop('CO(GT)',axis=1)\n",
        "features=features.drop('PT08.S5(O3)',axis=1)\n",
        "features=features.drop('NMHC(GT)',axis=1)\n",
        "features=features.drop('PT08.S1(CO)',axis=1)\n",
        "features.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "9o85KO7gdkI-",
        "outputId": "3a0e4d54-ee34-4051-9027-e5fbd3e06baf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      C6H6(GT)  PT08.S2(NMHC)  NOx(GT)  PT08.S3(NOx)  NO2(GT)  PT08.S4(NO2)  \\\n",
              "9352      13.5         1101.0    472.0         539.0    190.0        1374.0   \n",
              "9353      11.4         1027.0    353.0         604.0    179.0        1264.0   \n",
              "9354      12.4         1063.0    293.0         603.0    175.0        1241.0   \n",
              "9355       9.5          961.0    235.0         702.0    156.0        1041.0   \n",
              "9356      11.9         1047.0    265.0         654.0    168.0        1129.0   \n",
              "\n",
              "        RH      AH  \n",
              "9352  29.3  0.7568  \n",
              "9353  23.7  0.7119  \n",
              "9354  18.3  0.6406  \n",
              "9355  13.5  0.5139  \n",
              "9356  13.1  0.5028  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e4625f19-62a0-4973-ba22-e5635f016da6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>C6H6(GT)</th>\n",
              "      <th>PT08.S2(NMHC)</th>\n",
              "      <th>NOx(GT)</th>\n",
              "      <th>PT08.S3(NOx)</th>\n",
              "      <th>NO2(GT)</th>\n",
              "      <th>PT08.S4(NO2)</th>\n",
              "      <th>RH</th>\n",
              "      <th>AH</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>9352</th>\n",
              "      <td>13.5</td>\n",
              "      <td>1101.0</td>\n",
              "      <td>472.0</td>\n",
              "      <td>539.0</td>\n",
              "      <td>190.0</td>\n",
              "      <td>1374.0</td>\n",
              "      <td>29.3</td>\n",
              "      <td>0.7568</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9353</th>\n",
              "      <td>11.4</td>\n",
              "      <td>1027.0</td>\n",
              "      <td>353.0</td>\n",
              "      <td>604.0</td>\n",
              "      <td>179.0</td>\n",
              "      <td>1264.0</td>\n",
              "      <td>23.7</td>\n",
              "      <td>0.7119</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9354</th>\n",
              "      <td>12.4</td>\n",
              "      <td>1063.0</td>\n",
              "      <td>293.0</td>\n",
              "      <td>603.0</td>\n",
              "      <td>175.0</td>\n",
              "      <td>1241.0</td>\n",
              "      <td>18.3</td>\n",
              "      <td>0.6406</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9355</th>\n",
              "      <td>9.5</td>\n",
              "      <td>961.0</td>\n",
              "      <td>235.0</td>\n",
              "      <td>702.0</td>\n",
              "      <td>156.0</td>\n",
              "      <td>1041.0</td>\n",
              "      <td>13.5</td>\n",
              "      <td>0.5139</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9356</th>\n",
              "      <td>11.9</td>\n",
              "      <td>1047.0</td>\n",
              "      <td>265.0</td>\n",
              "      <td>654.0</td>\n",
              "      <td>168.0</td>\n",
              "      <td>1129.0</td>\n",
              "      <td>13.1</td>\n",
              "      <td>0.5028</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e4625f19-62a0-4973-ba22-e5635f016da6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e4625f19-62a0-4973-ba22-e5635f016da6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e4625f19-62a0-4973-ba22-e5635f016da6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-45567403-4d60-4644-9dfa-6d290af70394\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-45567403-4d60-4644-9dfa-6d290af70394')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-45567403-4d60-4644-9dfa-6d290af70394 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"features\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"C6H6(GT)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.4741099009232657,\n        \"min\": 9.5,\n        \"max\": 13.5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          11.4,\n          11.9,\n          12.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PT08.S2(NMHC)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.741665995597785,\n        \"min\": 961.0,\n        \"max\": 1101.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1027.0,\n          1047.0,\n          1063.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NOx(GT)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 93.68457717255279,\n        \"min\": 235.0,\n        \"max\": 472.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          353.0,\n          265.0,\n          293.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PT08.S3(NOx)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 61.20702574051446,\n        \"min\": 539.0,\n        \"max\": 702.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          604.0,\n          654.0,\n          603.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NO2(GT)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.660963628413123,\n        \"min\": 156.0,\n        \"max\": 190.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          179.0,\n          168.0,\n          175.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PT08.S4(NO2)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 128.34991234901565,\n        \"min\": 1041.0,\n        \"max\": 1374.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1264.0,\n          1129.0,\n          1241.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.929069201559471,\n        \"min\": 13.1,\n        \"max\": 29.3,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          23.7,\n          13.1,\n          18.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.11450115719939252,\n        \"min\": 0.5028,\n        \"max\": 0.7568,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.7119,\n          0.5028,\n          0.6406\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "id": "OWaNRRj4dmmM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(features, target)\n",
        "y_test.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QriksV_ldqrS",
        "outputId": "1f00b09b-3dc9-4430-81de-28dc86ee4b8e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "7873     9.400000\n",
              "4995    22.600000\n",
              "7168    18.317829\n",
              "8191     8.500000\n",
              "7464     8.700000\n",
              "Name: T, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**FEATURE SCALING**"
      ],
      "metadata": {
        "id": "uJEDF5aSduKK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "sc = StandardScaler()\n",
        "X_train = sc.fit_transform(X_train)\n",
        "X_test = sc.transform(X_test)"
      ],
      "metadata": {
        "id": "QiDgb0Y6dwRp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**XG BOOST - EXTREME GRADIENT BOOST**"
      ],
      "metadata": {
        "id": "c5u7QPxadxtU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install xgboost"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L6yd7oHqgaY5",
        "outputId": "481831b4-e384-4d2d-a34c-bf1300d4c7a2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: xgboost in /usr/local/lib/python3.10/dist-packages (2.0.3)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from xgboost) (1.25.2)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from xgboost) (1.11.4)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from xgboost import XGBRegressor\n",
        "from sklearn.metrics import r2_score\n",
        "# Initialize the XGBoost model with appropriate hyperparameters\n",
        "xgb_regressor = XGBRegressor(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=42)\n",
        "\n",
        "# Fit the XGBoost model on the training data\n",
        "xgb_regressor.fit(X_train, y_train)\n",
        "\n",
        "# Predict the target variable on the test set\n",
        "y_pred_xgb = xgb_regressor.predict(X_test)\n",
        "\n",
        "# Calculate the R-squared score\n",
        "accuracy_xgb = r2_score(y_test, y_pred_xgb)\n",
        "\n",
        "print(\"Accuracy of the XGBoost algorithm: {:.2f}\".format(accuracy_xgb))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_zf5c_YPd-fC",
        "outputId": "52227280-9266-468d-cc02-0651fcce5bc9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of the XGBoost algorithm: 1.00\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
        "\n",
        "# Initialize lists to store metrics\n",
        "xgb_mae = []\n",
        "xgb_mse = []\n",
        "xgb_r2 = []\n",
        "\n",
        "# Train and evaluate XGBoost model over different iterations\n",
        "for i in range(10, 101, 10):\n",
        "    xgb_regressor.set_params(n_estimators=i)\n",
        "    xgb_regressor.fit(X_train, y_train)\n",
        "    y_pred_xgb = xgb_regressor.predict(X_test)\n",
        "\n",
        "    # Calculate evaluation metrics\n",
        "    xgb_mae.append(mean_absolute_error(y_test, y_pred_xgb))\n",
        "    xgb_mse.append(mean_squared_error(y_test, y_pred_xgb))\n",
        "    xgb_r2.append(r2_score(y_test, y_pred_xgb))\n",
        "\n",
        "# Plotting for XGBoost\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(range(10, 101, 10), xgb_mae, label='Mean Absolute Error', marker='o')\n",
        "plt.plot(range(10, 101, 10), xgb_mse, label='Mean Squared Error', marker='o')\n",
        "plt.plot(range(10, 101, 10), xgb_r2, label='R-squared', marker='o')\n",
        "plt.xlabel('Number of Trees')\n",
        "plt.ylabel('Scores')\n",
        "plt.title('XGBoost Metrics over Iterations')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "MeDDNG9eeOh3",
        "outputId": "8b3adb46-4611-4618-cbea-256eb2ece045"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
        "\n",
        "# Compute regression metrics\n",
        "mae = mean_absolute_error(y_test, y_pred_xgb)\n",
        "mse = mean_squared_error(y_test, y_pred_xgb)\n",
        "r2 = r2_score(y_test, y_pred_xgb)\n",
        "\n",
        "# Print regression metrics\n",
        "print(\"Mean Absolute Error:\", mae)\n",
        "print(\"Mean Squared Error:\", mse)\n",
        "print(\"R-squared:\", r2)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5WiqLCTTdufc",
        "outputId": "33eb1d8f-ac37-41b3-ec93-6e96cd35d30c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Absolute Error: 3.1443065492040296\n",
            "Mean Squared Error: 17.302466857804994\n",
            "R-squared: 0.7690491933039474\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
        "\n",
        "# Initialize lists to store metrics\n",
        "xgb_mae = []\n",
        "xgb_mse = []\n",
        "xgb_r2 = []\n",
        "\n",
        "# Train and evaluate XGBoost model over different iterations\n",
        "for i in range(10, 101, 10):\n",
        "    xgb_regressor.set_params(n_estimators=i)\n",
        "    xgb_regressor.fit(X_train, y_train)\n",
        "    y_pred_xgb = xgb_regressor.predict(X_test)\n",
        "\n",
        "    # Calculate evaluation metrics\n",
        "    mae = mean_absolute_error(y_test, y_pred_xgb)\n",
        "    mse = mean_squared_error(y_test, y_pred_xgb)\n",
        "    r2 = r2_score(y_test, y_pred_xgb)\n",
        "\n",
        "    xgb_mae.append(mae)\n",
        "    xgb_mse.append(mse)\n",
        "    xgb_r2.append(r2)\n",
        "\n",
        "# Print the metrics\n",
        "for i in range(len(xgb_mae)):\n",
        "    print(f\"Iterations: {(i+1)*10}\")\n",
        "    print(f\"Mean Absolute Error: {xgb_mae[i]}\")\n",
        "    print(f\"Mean Squared Error: {xgb_mse[i]}\")\n",
        "    print(f\"R-squared: {xgb_r2[i]}\")\n",
        "    print()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "my0YIfglczo7",
        "outputId": "b23f6da7-f06d-4d89-8fa4-7c67bcf901b8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Iterations: 10\n",
            "Mean Absolute Error: 3.1443065492040296\n",
            "Mean Squared Error: 17.302466857804994\n",
            "R-squared: 0.7690491933039474\n",
            "\n",
            "Iterations: 20\n",
            "Mean Absolute Error: 1.6128106461562888\n",
            "Mean Squared Error: 5.3070451431236\n",
            "R-squared: 0.9291623346514964\n",
            "\n",
            "Iterations: 30\n",
            "Mean Absolute Error: 0.9693257357863506\n",
            "Mean Squared Error: 2.0281816942494113\n",
            "R-squared: 0.9729281262456646\n",
            "\n",
            "Iterations: 40\n",
            "Mean Absolute Error: 0.6824067745792787\n",
            "Mean Squared Error: 0.9914579005382754\n",
            "R-squared: 0.9867661643963098\n",
            "\n",
            "Iterations: 50\n",
            "Mean Absolute Error: 0.550546490466821\n",
            "Mean Squared Error: 0.620742820870948\n",
            "R-squared: 0.9917144152675398\n",
            "\n",
            "Iterations: 60\n",
            "Mean Absolute Error: 0.48510045472711805\n",
            "Mean Squared Error: 0.47569484319555894\n",
            "R-squared: 0.9936504945404586\n",
            "\n",
            "Iterations: 70\n",
            "Mean Absolute Error: 0.44146097989502336\n",
            "Mean Squared Error: 0.3949903060336154\n",
            "R-squared: 0.9947277269440667\n",
            "\n",
            "Iterations: 80\n",
            "Mean Absolute Error: 0.41770921675397\n",
            "Mean Squared Error: 0.3540370820178257\n",
            "R-squared: 0.9952743646114571\n",
            "\n",
            "Iterations: 90\n",
            "Mean Absolute Error: 0.4022079207992168\n",
            "Mean Squared Error: 0.3280778364259163\n",
            "R-squared: 0.9956208648394271\n",
            "\n",
            "Iterations: 100\n",
            "Mean Absolute Error: 0.38870842999201777\n",
            "Mean Squared Error: 0.30600132018405507\n",
            "R-squared: 0.9959155389617357\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import learning_curve\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from xgboost import XGBClassifier\n",
        "\n",
        "# Function to plot learning curve for XGBoost\n",
        "def plot_learning_curve_xgboost(estimator, X, y, cv=5):\n",
        "    train_sizes, train_scores, test_scores = learning_curve(estimator, X, y, cv=cv, n_jobs=-1, train_sizes=np.linspace(0.1, 1.0, 10))\n",
        "    train_mean = np.mean(train_scores, axis=1)\n",
        "    train_std = np.std(train_scores, axis=1)\n",
        "    test_mean = np.mean(test_scores, axis=1)\n",
        "    test_std = np.std(test_scores, axis=1)\n",
        "\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    plt.plot(train_sizes, train_mean, label='Training score')\n",
        "    plt.fill_between(train_sizes, train_mean - train_std, train_mean + train_std, alpha=0.15)\n",
        "    plt.plot(train_sizes, test_mean, label='Cross-validation score')\n",
        "    plt.fill_between(train_sizes, test_mean - test_std, test_mean + test_std, alpha=0.15)\n",
        "    plt.title('XGBoost Learning Curve')\n",
        "    plt.xlabel('Number of training examples')\n",
        "    plt.ylabel('Accuracy')\n",
        "    plt.legend(loc='best')\n",
        "    plt.grid()\n",
        "    plt.show()\n",
        "\n",
        "# Function to plot confusion matrix for XGBoost\n",
        "def plot_confusion_matrix_xgboost(estimator, X_test, y_test):\n",
        "    y_pred = estimator.predict(X_test)\n",
        "    conf_mat = confusion_matrix(y_test, y_pred)\n",
        "    plt.figure(figsize=(8, 6))\n",
        "    plt.imshow(conf_mat, cmap='Blues', interpolation='nearest')\n",
        "    plt.colorbar()\n",
        "    plt.title('XGBoost Confusion Matrix')\n",
        "    plt.xlabel('Predicted Labels')\n",
        "    plt.ylabel('True Labels')\n",
        "    plt.xticks([0, 1], ['Class 0', 'Class 1'])\n",
        "    plt.yticks([0, 1], ['Class 0', 'Class 1'])\n",
        "    for i in range(conf_mat.shape[0]):\n",
        "        for j in range(conf_mat.shape[1]):\n",
        "            plt.text(j, i, format(conf_mat[i, j], 'd'), horizontalalignment=\"center\", color=\"white\" if conf_mat[i, j] > conf_mat.max() / 2 else \"black\")\n",
        "    plt.show()\n",
        "\n",
        "# Generate synthetic dataset for example\n",
        "X, y = make_classification(n_samples=1000, n_features=20, n_classes=2, random_state=42)\n",
        "\n",
        "# Splitting the dataset into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Initialize XGBoost classifier\n",
        "xgb_classifier = XGBClassifier(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=42)\n",
        "\n",
        "# Fit XGBoost classifier on training data\n",
        "xgb_classifier.fit(X_train, y_train)\n",
        "\n",
        "# Plot learning curve for XGBoost\n",
        "plot_learning_curve_xgboost(xgb_classifier, X_train, y_train)\n",
        "\n",
        "# Plot confusion matrix for XGBoost\n",
        "plot_confusion_matrix_xgboost(xgb_classifier, X_test, y_test)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "YeggfQuomVgr",
        "outputId": "520fe026-bd87-4aee-ff40-fe729177023a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**CATBOOST**"
      ],
      "metadata": {
        "id": "yLg_FWBMgKSR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install catboost"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D2cNoaKJgP7t",
        "outputId": "001790d8-cc46-4373-994a-45e11b231a40"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting catboost\n",
            "  Downloading catboost-1.2.3-cp310-cp310-manylinux2014_x86_64.whl (98.5 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m98.5/98.5 MB\u001b[0m \u001b[31m8.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: graphviz in /usr/local/lib/python3.10/dist-packages (from catboost) (0.20.3)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from catboost) (3.7.1)\n",
            "Requirement already satisfied: numpy>=1.16.0 in /usr/local/lib/python3.10/dist-packages (from catboost) (1.25.2)\n",
            "Requirement already satisfied: pandas>=0.24 in /usr/local/lib/python3.10/dist-packages (from catboost) (2.0.3)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from catboost) (1.11.4)\n",
            "Requirement already satisfied: plotly in /usr/local/lib/python3.10/dist-packages (from catboost) (5.15.0)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from catboost) (1.16.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2024.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.2.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (4.50.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.4.5)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (24.0)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (3.1.2)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly->catboost) (8.2.3)\n",
            "Installing collected packages: catboost\n",
            "Successfully installed catboost-1.2.3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "g8EkLzdqXTyd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from catboost import CatBoostRegressor\n",
        "\n",
        "# Initialize the CatBoost model with appropriate hyperparameters\n",
        "catboost_regressor = CatBoostRegressor(iterations=100, learning_rate=0.1, depth=3, random_state=42)\n",
        "\n",
        "# Fit the CatBoost model on the training data\n",
        "catboost_regressor.fit(X_train, y_train, verbose=0)\n",
        "\n",
        "# Predict the target variable on the test set\n",
        "y_pred_catboost = catboost_regressor.predict(X_test)\n",
        "\n",
        "# Calculate the R-squared score\n",
        "accuracy_catboost = r2_score(y_test, y_pred_catboost)\n",
        "\n",
        "print(\"Accuracy of the CatBoost algorithm: {:.2f}\".format(accuracy_catboost))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wRNROB-KgFbl",
        "outputId": "754af2b4-77d6-49ae-fa78-635835e29daf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of the CatBoost algorithm: 1.00\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install catboost"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JAtg-5r8aNhF",
        "outputId": "b4c9f206-fdef-4a70-cb0e-23382da76cbe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting catboost\n",
            "  Downloading catboost-1.2.3-cp310-cp310-manylinux2014_x86_64.whl (98.5 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m98.5/98.5 MB\u001b[0m \u001b[31m2.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: graphviz in /usr/local/lib/python3.10/dist-packages (from catboost) (0.20.3)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from catboost) (3.7.1)\n",
            "Requirement already satisfied: numpy>=1.16.0 in /usr/local/lib/python3.10/dist-packages (from catboost) (1.25.2)\n",
            "Requirement already satisfied: pandas>=0.24 in /usr/local/lib/python3.10/dist-packages (from catboost) (2.0.3)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from catboost) (1.11.4)\n",
            "Requirement already satisfied: plotly in /usr/local/lib/python3.10/dist-packages (from catboost) (5.15.0)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from catboost) (1.16.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2024.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.2.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (4.50.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.4.5)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (24.0)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (3.1.2)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly->catboost) (8.2.3)\n",
            "Installing collected packages: catboost\n",
            "Successfully installed catboost-1.2.3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from catboost import CatBoostRegressor\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
        "\n",
        "# Initialize the CatBoost model with appropriate hyperparameters\n",
        "catboost_regressor = CatBoostRegressor(iterations=100, learning_rate=0.1, depth=3, random_state=42)\n",
        "\n",
        "# Fit the CatBoost model on the training data\n",
        "catboost_regressor.fit(X_train, y_train, verbose=0)\n",
        "\n",
        "# Predict the target variable on the test set\n",
        "y_pred_catboost = catboost_regressor.predict(X_test)\n",
        "\n",
        "# Calculate mean absolute error (MAE)\n",
        "mae_catboost = mean_absolute_error(y_test, y_pred_catboost)\n",
        "\n",
        "# Calculate mean squared error (MSE)\n",
        "mse_catboost = mean_squared_error(y_test, y_pred_catboost)\n",
        "\n",
        "# Calculate R-squared score\n",
        "r2_catboost = r2_score(y_test, y_pred_catboost)\n",
        "\n",
        "print(\"Mean Absolute Error (MAE) of the CatBoost algorithm: {:.2f}\".format(mae_catboost))\n",
        "print(\"Mean Squared Error (MSE) of the CatBoost algorithm: {:.2f}\".format(mse_catboost))\n",
        "print(\"R-squared score of the CatBoost algorithm: {:.2f}\".format(r2_catboost))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rGtrLP9VaKIy",
        "outputId": "a93f745f-c9f3-4758-bc18-4fcd251f0329"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Absolute Error (MAE) of the CatBoost algorithm: 0.45\n",
            "Mean Squared Error (MSE) of the CatBoost algorithm: 0.36\n",
            "R-squared score of the CatBoost algorithm: 1.00\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from catboost import CatBoostRegressor\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Initialize lists to store metrics\n",
        "catboost_mae = []\n",
        "catboost_mse = []\n",
        "catboost_r2 = []\n",
        "\n",
        "# Train and evaluate CatBoost model over different iterations\n",
        "for i in range(10, 101, 10):\n",
        "    # Initialize the CatBoost model with appropriate hyperparameters\n",
        "    catboost_regressor = CatBoostRegressor(iterations=i, learning_rate=0.1, depth=3, random_state=42, verbose=0)\n",
        "\n",
        "    # Fit the CatBoost model on the training data\n",
        "    catboost_regressor.fit(X_train, y_train)\n",
        "\n",
        "    # Predict the target variable on the test set\n",
        "    y_pred_catboost = catboost_regressor.predict(X_test)\n",
        "\n",
        "    # Calculate evaluation metrics\n",
        "    catboost_mae.append(mean_absolute_error(y_test, y_pred_catboost))\n",
        "    catboost_mse.append(mean_squared_error(y_test, y_pred_catboost))\n",
        "    catboost_r2.append(r2_score(y_test, y_pred_catboost))\n",
        "\n",
        "# Plotting for CatBoost\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(range(10, 101, 10), catboost_mae, label='Mean Absolute Error', marker='o')\n",
        "plt.plot(range(10, 101, 10), catboost_mse, label='Mean Squared Error', marker='o')\n",
        "plt.plot(range(10, 101, 10), catboost_r2, label='R-squared', marker='o')\n",
        "plt.xlabel('Number of Iterations')\n",
        "plt.ylabel('Scores')\n",
        "plt.title('CatBoost Metrics over Iterations')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "h1_ulBltamfY",
        "outputId": "dda555c9-a0b4-4f90-e763-e7c8df2c2ecb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import learning_curve\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from catboost import CatBoostClassifier\n",
        "\n",
        "# Function to plot learning curve for CatBoost\n",
        "def plot_learning_curve_catboost(estimator, X, y, cv=5):\n",
        "    train_sizes, train_scores, test_scores = learning_curve(estimator, X, y, cv=cv, n_jobs=-1, train_sizes=np.linspace(0.1, 1.0, 10))\n",
        "    train_mean = np.mean(train_scores, axis=1)\n",
        "    train_std = np.std(train_scores, axis=1)\n",
        "    test_mean = np.mean(test_scores, axis=1)\n",
        "    test_std = np.std(test_scores, axis=1)\n",
        "\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    plt.plot(train_sizes, train_mean, label='Training score')\n",
        "    plt.fill_between(train_sizes, train_mean - train_std, train_mean + train_std, alpha=0.15)\n",
        "    plt.plot(train_sizes, test_mean, label='Cross-validation score')\n",
        "    plt.fill_between(train_sizes, test_mean - test_std, test_mean + test_std, alpha=0.15)\n",
        "    plt.title('CatBoost Learning Curve')\n",
        "    plt.xlabel('Number of training examples')\n",
        "    plt.ylabel('Accuracy')\n",
        "    plt.legend(loc='best')\n",
        "    plt.grid()\n",
        "    plt.show()\n",
        "\n",
        "# Function to plot confusion matrix for CatBoost\n",
        "def plot_confusion_matrix_catboost(estimator, X_test, y_test):\n",
        "    y_pred = estimator.predict(X_test)\n",
        "    conf_mat = confusion_matrix(y_test, y_pred)\n",
        "    plt.figure(figsize=(8, 6))\n",
        "    plt.imshow(conf_mat, cmap='Blues', interpolation='nearest')\n",
        "    plt.colorbar()\n",
        "    plt.title('CatBoost Confusion Matrix')\n",
        "    plt.xlabel('Predicted Labels')\n",
        "    plt.ylabel('True Labels')\n",
        "    plt.xticks([0, 1], ['Class 0', 'Class 1'])\n",
        "    plt.yticks([0, 1], ['Class 0', 'Class 1'])\n",
        "    for i in range(conf_mat.shape[0]):\n",
        "        for j in range(conf_mat.shape[1]):\n",
        "            plt.text(j, i, format(conf_mat[i, j], 'd'), horizontalalignment=\"center\", color=\"white\" if conf_mat[i, j] > conf_mat.max() / 2 else \"black\")\n",
        "    plt.show()\n",
        "\n",
        "# Generate synthetic dataset for example\n",
        "X, y = make_classification(n_samples=1000, n_features=20, n_classes=2, random_state=42)\n",
        "\n",
        "# Splitting the dataset into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Initialize CatBoost classifier\n",
        "catboost_classifier = CatBoostClassifier(iterations=100, learning_rate=0.1, depth=3, random_state=42, verbose=0)\n",
        "\n",
        "# Fit CatBoost classifier on training data\n",
        "catboost_classifier.fit(X_train, y_train)\n",
        "\n",
        "# Plot learning curve for CatBoost\n",
        "plot_learning_curve_catboost(catboost_classifier, X_train, y_train)\n",
        "\n",
        "# Plot confusion matrix for CatBoost\n",
        "plot_confusion_matrix_catboost(catboost_classifier, X_test, y_test)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "FPhCD7c6cFV8",
        "outputId": "a8048a1a-600f-4129-cef1-a377ab1bd258"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**RANDOM FOREST**"
      ],
      "metadata": {
        "id": "qjJcWsjLhUu-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestRegressor\n"
      ],
      "metadata": {
        "id": "zhI6kjvghWfI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "regressor=RandomForestRegressor()\n",
        "regressor.fit(X_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "sWrseZ2ghY-8",
        "outputId": "26b795c2-45e8-4051-e431-486023b0eec8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestRegressor()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Coefficient of determination R^2 <-- on train set: {}\".format(regressor.score(X_train, y_train)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Jl_5c0t_hcMA",
        "outputId": "ec2e5b90-4a9a-408c-c312-1236230ff51e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Coefficient of determination R^2 <-- on train set: 0.9998498449264187\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "score=cross_val_score(regressor,X_train,y_train,cv=5)"
      ],
      "metadata": {
        "id": "iWLsmcbZhkHF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "score.mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T7C-EXBZh-cH",
        "outputId": "9702d393-74c5-410b-8509-f13918ba59a9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9988125504969698"
            ]
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Predictions on the test set\n",
        "y_pred = regressor.predict(X_test)\n",
        "\n",
        "# Compute evaluation metrics\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "# Print the evaluation metrics\n",
        "print(\"Mean Absolute Error:\", mae)\n",
        "print(\"Mean Squared Error:\", mse)\n",
        "print(\"R-squared:\", r2)\n",
        "\n",
        "# Plotting the graph for mean_absolute_error, mean_squared_error, and r2_score\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "# Mean Absolute Error\n",
        "plt.subplot(1, 3, 1)\n",
        "plt.bar(['MAE'], [mae], color='blue')\n",
        "plt.title('Mean Absolute Error')\n",
        "plt.ylabel('Error')\n",
        "\n",
        "# Mean Squared Error\n",
        "plt.subplot(1, 3, 2)\n",
        "plt.bar(['MSE'], [mse], color='green')\n",
        "plt.title('Mean Squared Error')\n",
        "plt.ylabel('Error')\n",
        "\n",
        "# R-squared\n",
        "plt.subplot(1, 3, 3)\n",
        "plt.bar(['R^2'], [r2], color='red')\n",
        "plt.title('R-squared')\n",
        "plt.ylabel('Score')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "7Knmu4cuiRN9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 662
        },
        "outputId": "889e2328-33e2-4009-97b0-96f603222a5b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Absolute Error: 0.12440730797274066\n",
            "Mean Squared Error: 0.06522965434668546\n",
            "R-squared: 0.999129324077562\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import r2_score\n",
        "\n",
        "# Initialize and train the RandomForestRegressor\n",
        "regressor = RandomForestRegressor()\n",
        "regressor.fit(X_train, y_train)\n",
        "\n",
        "# Predict on the training set\n",
        "y_pred_train = regressor.predict(X_train)\n",
        "\n",
        "# Compute the R-squared score on the training set\n",
        "r2_train = r2_score(y_train, y_pred_train)\n",
        "print(\"Coefficient of determination R^2 on the training set:\", r2_train)\n",
        "\n",
        "# Predict on the test set\n",
        "y_pred_test = regressor.predict(X_test)\n",
        "\n",
        "# Compute the R-squared score on the test set\n",
        "r2_test = r2_score(y_test, y_pred_test)\n",
        "print(\"Coefficient of determination R^2 on the test set:\", r2_test)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Tk6Mif2YfgcR",
        "outputId": "38a31f4e-fba9-4189-be5d-503c7dc4c414"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Coefficient of determination R^2 on the training set: 0.9998563054429682\n",
            "Coefficient of determination R^2 on the test set: 0.9990450612269242\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Plotting actual vs. predicted values\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.scatter(y_test, y_pred_test, color='blue', alpha=0.5)\n",
        "plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], '--', color='red')  # Plotting the diagonal line\n",
        "plt.title('Actual vs. Predicted Values')\n",
        "plt.xlabel('Actual Values')\n",
        "plt.ylabel('Predicted Values')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "Uwx6hErtiSbQ",
        "outputId": "c7645c43-a9db-4e5e-f1a9-a8fde4d48c3d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import learning_curve\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "# Function to plot learning curve for Random Forest\n",
        "def plot_learning_curve_random_forest(estimator, X, y, cv=5):\n",
        "    train_sizes, train_scores, test_scores = learning_curve(estimator, X, y, cv=cv, n_jobs=-1, train_sizes=np.linspace(0.1, 1.0, 10))\n",
        "    train_mean = np.mean(train_scores, axis=1)\n",
        "    train_std = np.std(train_scores, axis=1)\n",
        "    test_mean = np.mean(test_scores, axis=1)\n",
        "    test_std = np.std(test_scores, axis=1)\n",
        "\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    plt.plot(train_sizes, train_mean, label='Training score')\n",
        "    plt.fill_between(train_sizes, train_mean - train_std, train_mean + train_std, alpha=0.15)\n",
        "    plt.plot(train_sizes, test_mean, label='Cross-validation score')\n",
        "    plt.fill_between(train_sizes, test_mean - test_std, test_mean + test_std, alpha=0.15)\n",
        "    plt.title('Random Forest Learning Curve')\n",
        "    plt.xlabel('Number of training examples')\n",
        "    plt.ylabel('Accuracy')\n",
        "    plt.legend(loc='best')\n",
        "    plt.grid()\n",
        "    plt.show()\n",
        "\n",
        "# Function to plot confusion matrix for Random Forest\n",
        "def plot_confusion_matrix_random_forest(estimator, X_test, y_test):\n",
        "    y_pred = estimator.predict(X_test)\n",
        "    conf_mat = confusion_matrix(y_test, y_pred)\n",
        "    plt.figure(figsize=(8, 6))\n",
        "    plt.imshow(conf_mat, cmap='Blues', interpolation='nearest')\n",
        "    plt.colorbar()\n",
        "    plt.title('Random Forest Confusion Matrix')\n",
        "    plt.xlabel('Predicted Labels')\n",
        "    plt.ylabel('True Labels')\n",
        "    plt.xticks([0, 1], ['Class 0', 'Class 1'])\n",
        "    plt.yticks([0, 1], ['Class 0', 'Class 1'])\n",
        "    for i in range(conf_mat.shape[0]):\n",
        "        for j in range(conf_mat.shape[1]):\n",
        "            plt.text(j, i, format(conf_mat[i, j], 'd'), horizontalalignment=\"center\", color=\"white\" if conf_mat[i, j] > conf_mat.max() / 2 else \"black\")\n",
        "    plt.show()\n",
        "\n",
        "# Generate synthetic dataset for example\n",
        "X, y = make_classification(n_samples=1000, n_features=20, n_classes=2, random_state=42)\n",
        "\n",
        "# Splitting the dataset into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Initialize Random Forest classifier\n",
        "random_forest_classifier = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "\n",
        "# Fit Random Forest classifier on training data\n",
        "random_forest_classifier.fit(X_train, y_train)\n",
        "\n",
        "# Plot learning curve for Random Forest\n",
        "plot_learning_curve_random_forest(random_forest_classifier, X_train, y_train)\n",
        "\n",
        "# Plot confusion matrix for Random Forest\n",
        "plot_confusion_matrix_random_forest(random_forest_classifier, X_test, y_test)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "P6XimoJunMQ3",
        "outputId": "17932c62-8d38-45fc-dce2-d759953fb779"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "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qWnTpqW+Xjf77rvvpH79+kk1a9aU1Gq1FBwcLA0bNkzasmWLzX779u2ToqKiJK1WK9WtW1eKi4srtdR8Sa9LUZ07d5YASE899VSp+3z66adSZGSk5ObmJnl5eUmtWrWSJk+eLF28eLHcz42ISJIkSSFJMsyOJiIiomovIiICAQEB1qUEiIhcHed8ERER0R0xGo3F5s9t2bIFhw4dQo8ePeRpFBGRE2LPFxEREd2Rc+fOoU+fPnjssccQEhKC48ePY/HixfDx8cGRI0fg5+cndxOJiJwCC24QERHRHalRowYiIyPx+eef48qVK/Dw8MDAgQPxzjvvMHgRERXBni8iIiIiIiIH4JwvIiIiIiIiB2D4IiIiIiIicgDO+bpNFosFFy9ehJeXFxQKhdzNISIiIiIimUiShIyMDISEhECpLL1/i+HrNl28eBGhoaFyN4OIiIiIiJzEhQsXUKdOnVJvZ/i6TV5eXgDEC+zt7S1za6oWo9GIDRs2oF+/ftBoNHI3hyoJz7Pr4Ll2DTzProHn2XXwXNtXeno6QkNDrRmhNAxft6lgqKG3tzfDVwUZjUa4u7vD29ubP+zVGM+z6+C5dg08z66B59l18FxXjrKmI7HgBhERERERkQMwfBERERERETkAwxcREREREZEDMHwRERERERE5AMMXERERERGRAzB8EREREREROQDDFxERERERkQMwfBERERERETkAwxcREREREZEDMHwRERERERE5AMMXERERERGRAzB8EREREREROQDDFxERERERkQMwfBERERERETmArOFr27ZtGDRoEEJCQqBQKLBu3boy77Nlyxbcdddd0Ol0aNiwIZYtW1Zsn/j4eNSrVw96vR5RUVHYu3evze25ubkYP348/Pz84OnpiSFDhiAlJcVOz4qIiIiIiKg4WcNXVlYW2rRpg/j4+HLtf/bsWQwcOBA9e/bEwYMHMXHiRDz11FP4/fffrfusWrUKMTExmDlzJvbv3482bdogOjoaly9ftu4zadIk/PTTT1i9ejW2bt2Kixcv4sEHH7T78yMiIiIiIiqglvPB+/fvj/79+5d7/8WLF6N+/fqYN28eAKBZs2bYvn07PvjgA0RHRwMA4uLiMHbsWIwePdp6n19++QVLlizBlClTkJaWhi+++AIrV65Er169AABLly5Fs2bNsHv3bnTo0MHOz7JySZKEHKNZ7mZUiNFogsEMZOeZoJEUcjeHKgnPs+vguXYNPM+ugefZdVSnc+2mUUGhqBrPQdbwVVG7du1Cnz59bLZFR0dj4sSJAIC8vDzs27cPU6dOtd6uVCrRp08f7Nq1CwCwb98+GI1Gm+M0bdoUdevWxa5du0oNXwaDAQaDwXo9PT0dAGA0GmE0Gu3y/G5Hdp4Jbd7YLNvj3z41Ju+tiu2miuF5dh08166B59k18Dy7jupxrg9N7wV3rbyxprx5oEqFr+TkZNSqVctmW61atZCeno6cnBzcuHEDZrO5xH2OHz9uPYZWq4Wvr2+xfZKTk0t97NjYWMyePbvY9g0bNsDd3f02n9GdM5iBKnYaiYiIiIjs5vffN0CnkrcN2dnZ5dqPn9rLaerUqYiJibFeT09PR2hoKPr16wdvb2/Z2iVJEqKjq96ww82bN6NXr17QaPgWrK54nl0Hz7Vr4Hl2DTzPrqM6nWtnGHZYMCquLFXqlQ4KCipWlTAlJQXe3t5wc3ODSqWCSqUqcZ+goCDrMfLy8pCammrT+1V0n5LodDrodLpi2zUaDTQazR08qzun1cr68BVmNBqhUwE+HnrZXzuqPDzProPn2jXwPLsGnmfXwXNtX+V9DavUOl8dO3ZEQkKCzbaNGzeiY8eOAACtVovIyEibfSwWCxISEqz7REZGQqPR2Oxz4sQJJCYmWvchIiIiIiKyN1l7vjIzM3Hq1Cnr9bNnz+LgwYOoWbMm6tati6lTpyIpKQn/93//BwAYN24cPvroI0yePBlPPvkkNm/ejG+//Ra//PKL9RgxMTEYOXIk2rVrh/bt22P+/PnIysqyVj/08fHBmDFjEBMTg5o1a8Lb2xvPP/88OnbsWOUqHRIRERERUdUha/j63//+h549e1qvF8ypGjlyJJYtW4ZLly4hMTHRenv9+vXxyy+/YNKkSViwYAHq1KmDzz//3FpmHgCGDRuGK1euYMaMGUhOTkZERATWr19vU4Tjgw8+gFKpxJAhQ2AwGBAdHY1FixY54BkTEREREZGrkjV89ejRA5IklXr7smXLSrzPgQMHbnncCRMmYMKECaXertfrER8fX+7FnYmIiIiIiO5UlZrzRUREREREVFUxfBERERERETkAwxcREREREZEDMHwRERERERE5AMMXERERERGRAzB8EREREREROQDDFxERERERkQMwfBERERERETkAwxcREREREZEDMHwRERERERE5AMMXERERERGRAzB8EREREREROQDDFxERERERkQMwfBERERERETkAwxcREREREZEDMHwRERERERE5AMMXERERERGRAzB8EREREREROQDDFxERERERkQMwfBERERERETkAwxcREREREZEDMHwRERERERE5AMMXERERERGRAzB8EREREREROQDDFxERERERkQMwfBERERERETkAwxcREREREZEDMHwRERERERE5AMMXERERERGRAzB8EREREREROQDDFxERERERkQMwfBERERERETkAwxcREREREZEDMHwRERERERE5AMMXERERERGRAzB8EREREREROQDDFxERERERkQMwfBERERERETkAwxcREREREZEDMHwRERERERE5AMMXERERERGRAzB8EREREREROQDDFxERERERkQMwfBERERERETkAwxcREREREZEDMHwRERERERE5AMMXERERERGRAzB8EREREREROQDDFxERERERkQMwfBERERERETkAwxcREREREZEDMHwRERERERE5gOzhKz4+HvXq1YNer0dUVBT27t1b6r5GoxFz5sxBeHg49Ho92rRpg/Xr19vsU69ePSgUimKX8ePHW/fp0aNHsdvHjRtXac+RiIiIiIhI1vC1atUqxMTEYObMmdi/fz/atGmD6OhoXL58ucT9p02bhk8++QQLFy7E0aNHMW7cODzwwAM4cOCAdZ+//voLly5dsl42btwIAHj44YdtjjV27Fib/ebOnVt5T5SIiIiIiFyerOErLi4OY8eOxejRo9G8eXMsXrwY7u7uWLJkSYn7L1++HK+99hoGDBiABg0a4Nlnn8WAAQMwb9486z4BAQEICgqyXn7++WeEh4eje/fuNsdyd3e32c/b27tSnysREREREbk2tVwPnJeXh3379mHq1KnWbUqlEn369MGuXbtKvI/BYIBer7fZ5ubmhu3bt5f6GF999RViYmKgUChsbluxYgW++uorBAUFYdCgQZg+fTrc3d1Lba/BYIDBYLBeT09PByCGQhqNxls/WbJR8HrxdaveeJ5dB8+1a+B5dg08z66D59q+yvs6yha+rl69CrPZjFq1atlsr1WrFo4fP17ifaKjoxEXF4du3bohPDwcCQkJWLt2Lcxmc4n7r1u3DqmpqRg1apTN9hEjRiAsLAwhISE4fPgwXn31VZw4cQJr164ttb2xsbGYPXt2se0bNmy4ZWij0hUMCaXqjefZdfBcuwaeZ9fA8+w6eK7tIzs7u1z7KSRJkiq5LSW6ePEiateujZ07d6Jjx47W7ZMnT8bWrVuxZ8+eYve5cuUKxo4di59++gkKhQLh4eHo06cPlixZgpycnGL7R0dHQ6vV4qeffrplWzZv3ozevXvj1KlTCA8PL3Gfknq+QkNDcfXqVQ5ZrCCj0YiNGzeib9++0Gg0cjeHKgnPs+vguXYNPM+ugefZdfBc21d6ejr8/f2RlpZ2y2wgW8+Xv78/VCoVUlJSbLanpKQgKCioxPsEBARg3bp1yM3NxbVr1xASEoIpU6agQYMGxfY9f/48Nm3adMverAJRUVEAcMvwpdPpoNPpim3XaDR8w94mvnaugefZdfBcuwaeZ9fA8+w6eK7to7yvoWwFN7RaLSIjI5GQkGDdZrFYkJCQYNMTVhK9Xo/atWvDZDJhzZo1uP/++4vts3TpUgQGBmLgwIFltuXgwYMAgODg4Io9CSIiIiIionKSrecLAGJiYjBy5Ei0a9cO7du3x/z585GVlYXRo0cDAJ544gnUrl0bsbGxAIA9e/YgKSkJERERSEpKwqxZs2CxWDB58mSb41osFixduhQjR46EWm37FE+fPo2VK1diwIAB8PPzw+HDhzFp0iR069YNrVu3dswTJyIiIiIilyNr+Bo2bBiuXLmCGTNmIDk5GREREVi/fr21CEdiYiKUysLOudzcXEybNg1nzpyBp6cnBgwYgOXLl8PX19fmuJs2bUJiYiKefPLJYo+p1WqxadMma9ALDQ3FkCFDMG3atEp9rkRERERE5NpkDV8AMGHCBEyYMKHE27Zs2WJzvXv37jh69GiZx+zXrx9KqyMSGhqKrVu3VridREREREREd0LWRZaJiIiIiIhcBcMXERERERGRAzB8EREREREROQDDFxERERERkQMwfBERERERETkAwxcREREREZEDMHwRERERERE5AMMXERERERGRAzB8EREREREROQDDFxERERERkQMwfBERERERETkAwxcREREREZEDMHwRERERERE5AMMXERERERGRAzB8EREREREROQDDFxERERERkQMwfBERERERETkAwxcREREREZEDMHwRERERERE5AMMXERERERGRAzB8EREREREROQDDFxERERERkQMwfBERERERETkAwxcREREREZEDMHwRERERERE5AMMXERERERGRAzB8EREREREROQDDFxERERERkQMwfBERERERETkAwxcREREREZEDMHwRERERERE5AMMXERERERGRAzB8EREREREROQDDFxERERERkQMwfBERERERETkAwxcREREREZEDMHwRERERERE5AMMXERERERGRAzB8EREREREROQDDFxERERERkQMwfBERERERETkAwxcREREREZEDMHwRERERERE5AMMXERERERGRAzB8EREREREROQDDFxERERERkQMwfBERERERETkAwxcREREREZEDMHwRERERERE5AMMXERERERGRAzB8EREREREROQDDFxERERERkQMwfBERERERETmA7OErPj4e9erVg16vR1RUFPbu3VvqvkajEXPmzEF4eDj0ej3atGmD9evX2+wza9YsKBQKm0vTpk1t9snNzcX48ePh5+cHT09PDBkyBCkpKZXy/IiIiIiIiACZw9eqVasQExODmTNnYv/+/WjTpg2io6Nx+fLlEvefNm0aPvnkEyxcuBBHjx7FuHHj8MADD+DAgQM2+7Vo0QKXLl2yXrZv325z+6RJk/DTTz9h9erV2Lp1Ky5evIgHH3yw0p4nERERERGRrOErLi4OY8eOxejRo9G8eXMsXrwY7u7uWLJkSYn7L1++HK+99hoGDBiABg0a4Nlnn8WAAQMwb948m/3UajWCgoKsF39/f+ttaWlp+OKLLxAXF4devXohMjISS5cuxc6dO7F79+5Kfb5EREREROS61HI9cF5eHvbt24epU6datymVSvTp0we7du0q8T4GgwF6vd5mm5ubW7GerZMnTyIkJAR6vR4dO3ZEbGws6tatCwDYt28fjEYj+vTpY92/adOmqFu3Lnbt2oUOHTqU+tgGg8F6PT09HYAYCmk0GivwzKng9eLrVr3xPLsOnmvXwPPsGnieXQfPtX2V93WULXxdvXoVZrMZtWrVstleq1YtHD9+vMT7REdHIy4uDt26dUN4eDgSEhKwdu1amM1m6z5RUVFYtmwZmjRpgkuXLmH27Nno2rUrjhw5Ai8vLyQnJ0Or1cLX17fY4yYnJ5fa3tjYWMyePbvY9g0bNsDd3b0Cz5wKbNy4Ue4mkAPwPLsOnmvXwPPsGnieXQfPtX1kZ2eXaz/ZwtftWLBgAcaOHYumTZtCoVAgPDwco0ePthmm2L9/f+v/W7dujaioKISFheHbb7/FmDFjbvuxp06dipiYGOv19PR0hIaGol+/fvD29r7t47oio9GIjRs3om/fvtBoNHI3hyoJz7Pr4Ll2DTzProHn2XXwXNtXwai4ssgWvvz9/aFSqYpVGUxJSUFQUFCJ9wkICMC6deuQm5uLa9euISQkBFOmTEGDBg1KfRxfX180btwYp06dAgAEBQUhLy8PqampNr1ft3pcANDpdNDpdMW2azQavmFvE18718Dz7Dp4rl0Dz7Nr4Hl2HTzX9lHe11C2ghtarRaRkZFISEiwbrNYLEhISEDHjh1veV+9Xo/atWvDZDJhzZo1uP/++0vdNzMzE6dPn0ZwcDAAIDIyEhqNxuZxT5w4gcTExDIfl4iIiIiI6HbJOuwwJiYGI0eORLt27dC+fXvMnz8fWVlZGD16NADgiSeeQO3atREbGwsA2LNnD5KSkhAREYGkpCTMmjULFosFkydPth7z5ZdfxqBBgxAWFoaLFy9i5syZUKlUGD58OADAx8cHY8aMQUxMDGrWrAlvb288//zz6NixY6nFNoiIiIiIiO6UrOFr2LBhuHLlCmbMmIHk5GRERERg/fr11iIciYmJUCoLO+dyc3Mxbdo0nDlzBp6enhgwYACWL19uM3zwv//+w/Dhw3Ht2jUEBASgS5cu2L17NwICAqz7fPDBB1AqlRgyZAgMBgOio6OxaNEihz1vIiIiIiJyPbIX3JgwYQImTJhQ4m1btmyxud69e3ccPXr0lsf75ptvynxMvV6P+Ph4xMfHl7udREREREREd0LWRZaJiIiIiIhcBcMXERERERGRAzB8EREREREROQDDFxERERERkQMwfBERERERETkAwxcREREREZEDMHwRERERERE5AMMXERERERGRAzB8EREREREROQDDFxERERERkQMwfBERERERETkAwxcREREREZEDMHwRERERERE5AMMXERERERGRAzB8EREREREROQDDFxERERERkQMwfBERERERETkAwxcREREREZEDMHwRERERERE5AMMXERERERGRAzB8EREREREROQDDFxERERERkQMwfBERERERETkAwxcREREREZEDMHwRERERERE5AMMXERERERGRAzB8EREREREROQDDFxERERERkQMwfBERERERETkAwxcREREREZEDMHwRERERERE5AMMXERERERGRAzB8EREREREROQDDFxERERERkQMwfBERERERETkAwxcREREREZEDMHwRERERERE5AMMXERERERGRAzB8EREREREROQDDFxERERERkQMwfBERERERETkAwxcREREREZEDMHwRERERERE5AMMXERERERGRAzB8EREREREROQDDFxERERERkQMwfBERERERETlAhcNXvXr1MGfOHCQmJlZGe4iIiIiIiKqlCoeviRMnYu3atWjQoAH69u2Lb775BgaDoTLaRkREREREVG3cVvg6ePAg9u7di2bNmuH5559HcHAwJkyYgP3791dGG4mIiIiIiKq8257zddddd+HDDz/ExYsXMXPmTHz++ee4++67ERERgSVLlkCSJHu2k4iIiIiIqEpT3+4djUYjvv/+eyxduhQbN25Ehw4dMGbMGPz333947bXXsGnTJqxcudKebSUiIiIiIqqyKtzztX//fpuhhi1atMCRI0ewfft2jB49GtOnT8emTZvw/fffl+t48fHxqFevHvR6PaKiorB3795S9zUajZgzZw7Cw8Oh1+vRpk0brF+/3maf2NhY3H333fDy8kJgYCAGDx6MEydO2OzTo0cPKBQKm8u4ceMq+lIQERERERGVW4XD1913342TJ0/i448/RlJSEt5//300bdrUZp/69evjkUceKfNYq1atQkxMDGbOnIn9+/ejTZs2iI6OxuXLl0vcf9q0afjkk0+wcOFCHD16FOPGjcMDDzyAAwcOWPfZunUrxo8fj927d2Pjxo0wGo3o168fsrKybI41duxYXLp0yXqZO3duRV8KIiIiIiKicqvwsMMzZ84gLCzslvt4eHhg6dKlZR4rLi4OY8eOxejRowEAixcvxi+//IIlS5ZgypQpxfZfvnw5Xn/9dQwYMAAA8Oyzz2LTpk2YN28evvrqKwAo1hO2bNkyBAYGYt++fejWrZt1u7u7O4KCgspsIxERERERkT1UOHxdvnwZycnJiIqKstm+Z88eqFQqtGvXrlzHycvLw759+zB16lTrNqVSiT59+mDXrl0l3sdgMECv19tsc3Nzw/bt20t9nLS0NABAzZo1bbavWLECX331FYKCgjBo0CBMnz4d7u7upR7HYDDYlNRPT08HIIZCGo3GUu9HxRW8Xnzdqjee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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**NAIVE BAYES**"
      ],
      "metadata": {
        "id": "UMEovv7oiTaA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Importing necessary libraries\n",
        "from sklearn.datasets import make_classification\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Generating synthetic dataset for example\n",
        "X, y = make_classification(n_samples=1000, n_features=20, n_classes=2, random_state=42)\n",
        "\n",
        "# Splitting the dataset into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Initializing Naive Bayes classifier (GaussianNB)\n",
        "nb_classifier = GaussianNB()\n",
        "\n",
        "# Training the classifier\n",
        "nb_classifier.fit(X_train, y_train)\n",
        "\n",
        "# Making predictions on the test set\n",
        "y_pred = nb_classifier.predict(X_test)\n",
        "\n",
        "# Calculating accuracy\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(\"Accuracy:\", accuracy)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KJ17GNkHiXIx",
        "outputId": "9c6298fd-674e-4539-9597-aa7f643559fa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.795\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Importing necessary libraries\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.datasets import make_classification\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix\n",
        "from sklearn.model_selection import learning_curve\n",
        "\n",
        "# Generating synthetic dataset for example\n",
        "X, y = make_classification(n_samples=1000, n_features=20, n_classes=2, random_state=42)\n",
        "\n",
        "# Splitting the dataset into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Initializing Naive Bayes classifier (GaussianNB)\n",
        "nb_classifier = GaussianNB()\n",
        "\n",
        "# Training the classifier\n",
        "nb_classifier.fit(X_train, y_train)\n",
        "\n",
        "# Making predictions on the test set\n",
        "y_pred = nb_classifier.predict(X_test)\n",
        "\n",
        "# Calculating accuracy\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(\"Accuracy:\", accuracy)\n",
        "\n",
        "# Plotting learning curve\n",
        "train_sizes, train_scores, test_scores = learning_curve(nb_classifier, X, y, cv=5, n_jobs=-1, train_sizes=np.linspace(0.1, 1.0, 10))\n",
        "train_mean = np.mean(train_scores, axis=1)\n",
        "train_std = np.std(train_scores, axis=1)\n",
        "test_mean = np.mean(test_scores, axis=1)\n",
        "test_std = np.std(test_scores, axis=1)\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(train_sizes, train_mean, label='Training score')\n",
        "plt.fill_between(train_sizes, train_mean - train_std, train_mean + train_std, alpha=0.15)\n",
        "plt.plot(train_sizes, test_mean, label='Cross-validation score')\n",
        "plt.fill_between(train_sizes, test_mean - test_std, test_mean + test_std, alpha=0.15)\n",
        "plt.title('Learning Curve')\n",
        "plt.xlabel('Number of training examples')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend(loc='best')\n",
        "plt.grid()\n",
        "plt.show()\n",
        "\n",
        "# Plotting confusion matrix\n",
        "conf_mat = confusion_matrix(y_test, y_pred)\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.imshow(conf_mat, cmap='Blues', interpolation='nearest')\n",
        "plt.colorbar()\n",
        "plt.title('Confusion Matrix')\n",
        "plt.xlabel('Predicted Labels')\n",
        "plt.ylabel('True Labels')\n",
        "plt.xticks([0, 1], ['Class 0', 'Class 1'])\n",
        "plt.yticks([0, 1], ['Class 0', 'Class 1'])\n",
        "for i in range(conf_mat.shape[0]):\n",
        "    for j in range(conf_mat.shape[1]):\n",
        "        plt.text(j, i, format(conf_mat[i, j], 'd'), horizontalalignment=\"center\", color=\"white\" if conf_mat[i, j] > conf_mat.max() / 2 else \"black\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "DPH8GvCYiapw",
        "outputId": "11c32578-b19a-4407-cc29-f568f8d9d9f5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.795\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA1cAAAIjCAYAAADvBuGTAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAADf90lEQVR4nOzdeXhU1f3H8fe9d/bJvhAIhH3fZBMUxKWC0CpWtNWKVbGutVQt7lXAtdQNqRsurdq6VGzV/mxdAYtWUVFQRNnXsAdC1lnv9vtjkiGBsASSzCT5vp4nTzJ37sycmZtM7mfOOd+j2LZtI4QQQgghhBDimKiJboAQQgghhBBCtAQSroQQQgghhBCiAUi4EkIIIYQQQogGIOFKCCGEEEIIIRqAhCshhBBCCCGEaAASroQQQgghhBCiAUi4EkIIIYQQQogGIOFKCCGEEEIIIRqAhCshhBBCCCGEaAASroQQQrRonTt3ZvLkyYluhhBCiFZAwpUQQojDevHFF1EUha+//jrRTWl2wuEwjz76KCNGjCA9PR2Px0PPnj2ZMmUKa9asSXTzhBBCNCBHohsghBBCNKbVq1ejqon5LHHPnj2MHz+eJUuWcNZZZzFp0iRSUlJYvXo1r732Gs8++yzRaDQhbRNCCNHwJFwJIYRoNgzDwLIsXC7XEd/G7XY3YosObfLkyXzzzTf885//5Lzzzqt13b333ssdd9zRII9zNK+LEEKIhifDAoUQQjSYbdu28atf/Yq8vDzcbjf9+vXj+eefr7VPNBpl+vTpDB06lPT0dPx+P6NHj+a///1vrf02bdqEoig8/PDDzJ49m27duuF2u1mxYgV33XUXiqKwbt06Jk+eTEZGBunp6Vx22WUEg8Fa97P/nKvqIY6fffYZU6dOJTc3F7/fz8SJE9m9e3et21qWxV133UV+fj4+n4/TTjuNFStWHNE8ri+//JJ33nmHyy+//IBgBbHQ9/DDD8cvn3rqqZx66qkH7Dd58mQ6d+582Nflm2++weFwcPfddx9wH6tXr0ZRFJ544on4ttLSUm644QYKCgpwu910796dBx54AMuyDvm8hBBCHJz0XAkhhGgQu3bt4oQTTkBRFKZMmUJubi7vvfcel19+OeXl5dxwww0AlJeX8+c//5kLL7yQK6+8koqKCv7yl78wbtw4Fi9ezKBBg2rd7wsvvEA4HOaqq67C7XaTlZUVv+7888+nS5cuzJw5k6VLl/LnP/+ZNm3a8MADDxy2vb/97W/JzMxkxowZbNq0idmzZzNlyhTmzp0b3+f222/nwQcfZMKECYwbN45ly5Yxbtw4wuHwYe//7bffBuDiiy8+glev/vZ/Xdq1a8cpp5zC66+/zowZM2rtO3fuXDRN4+c//zkAwWCQU045hW3btnH11VfTsWNHFi1axO23386OHTuYPXt2o7RZCCFaOglXQgghGsQdd9yBaZosX76c7OxsAK655houvPBC7rrrLq6++mq8Xi+ZmZls2rSp1hC2K6+8kt69e/P444/zl7/8pdb9bt26lXXr1pGbm3vAYw4ePLjW/sXFxfzlL385onCVnZ3Nhx9+iKIoQKyX6rHHHqOsrIz09HR27drFrFmzOOecc3jrrbfit7v77ru56667Dnv/K1euBGDAgAGH3fdo1PW6XHDBBVx99dV8//339O/fP7597ty5nHLKKeTl5QEwa9Ys1q9fzzfffEOPHj0AuPrqq8nPz+ehhx7ixhtvpKCgoFHaLYQQLZkMCxRCCHHMbNvmjTfeYMKECdi2zZ49e+Jf48aNo6ysjKVLlwKgaVo8WFmWxd69ezEMg2HDhsX3qem8886rM1hBLLzVNHr0aIqLiykvLz9sm6+66qp4sKq+rWmabN68GYAFCxZgGAbXXnttrdv99re/Pex9A/E2pKamHtH+9VXX63LuueficDhq9b59//33rFixggsuuCC+7R//+AejR48mMzOz1rEaM2YMpmnyySefNEqbhRCipZOeKyGEEMds9+7dlJaW8uyzz/Lss8/WuU9RUVH857/+9a888sgjrFq1Cl3X49u7dOlywO3q2latY8eOtS5nZmYCUFJSQlpa2iHbfKjbAvGQ1b1791r7ZWVlxfc9lOrHr6ioICMj47D711ddr0tOTg6nn346r7/+Ovfeey8Q67VyOByce+658f3Wrl3Ld999d9DQWvNYCSGEOHISroQQQhyz6iIIv/zlL7n00kvr3GfgwIEAvPzyy0yePJlzzjmHm2++mTZt2qBpGjNnzmT9+vUH3M7r9R70cTVNq3O7bduHbfOx3PZI9O7dG4Dly5czevTow+6vKEqdj22aZp37H+x1+cUvfsFll13Gt99+y6BBg3j99dc5/fTTycnJie9jWRZjx47llltuqfM+evbsedj2CiGEOJCEKyGEEMcsNzeX1NRUTNNkzJgxh9z3n//8J127duXNN9+sNSxv/yIMidapUycA1q1bV6uXqLi4ON67dSgTJkxg5syZvPzyy0cUrjIzM9mwYcMB26t70I7UOeecw9VXXx0fGrhmzRpuv/32Wvt069aNysrKwx4rIYQQ9SNzroQQQhwzTdM477zzeOONN/j+++8PuL5mifPqHqOavTRffvkln3/+eeM3tB5OP/10HA4Hc+bMqbW9ZjnzQznxxBMZP348f/7zn/nXv/51wPXRaJSbbropfrlbt26sWrWq1mu1bNkyPvvss3q1OyMjg3HjxvH666/z2muv4XK5OOecc2rtc/755/P555/zwQcfHHD70tJSDMOo12MKIYSIkZ4rIYQQR+z555/n/fffP2D79ddfzx//+Ef++9//MmLECK688kr69u3L3r17Wbp0KfPnz2fv3r0AnHXWWbz55ptMnDiRM888k40bN/L000/Tt29fKisrm/opHVReXh7XX389jzzyCGeffTbjx49n2bJlvPfee+Tk5NTqdTuYv/3tb5xxxhmce+65TJgwgdNPPx2/38/atWt57bXX2LFjR3ytq1/96lfMmjWLcePGcfnll1NUVMTTTz9Nv379jqhAR00XXHABv/zlL3nqqacYN27cAXO+br75Zt5++23OOussJk+ezNChQwkEAixfvpx//vOfbNq0qdYwQiGEEEdGwpUQQogjtn8vTrXJkyfToUMHFi9ezD333MObb77JU089RXZ2Nv369atVGn3y5Mns3LmTZ555hg8++IC+ffvy8ssv849//IOFCxc20TM5Mg888AA+n4/nnnuO+fPnc+KJJ/Lhhx9y0kkn4fF4Dnv73NxcFi1axFNPPcXcuXO54447iEajdOrUibPPPpvrr78+vm+fPn3429/+xvTp05k6dSp9+/blpZde4tVXX63363L22Wfj9XqpqKioVSWwms/n4+OPP+YPf/gD//jHP/jb3/5GWloaPXv25O677yY9Pb1ejyeEECJGsRtq5q4QQgjRCpSWlpKZmcl9993HHXfckejmCCGESCIy50oIIYQ4iFAodMC22bNnA3Dqqac2bWOEEEIkPRkWKIQQQhzE3LlzefHFF/nJT35CSkoKn376KX//+98544wzGDVqVKKbJ4QQIslIuBJCCCEOYuDAgTgcDh588EHKy8vjRS7uu+++RDdNCCFEEpI5V0IIIYQQQgjRAGTOlRBCCCGEEEI0AAlXQgghhBBCCNEAZM5VHSzLYvv27aSmph7RIpFCCCGEEEKIlsm2bSoqKsjPz0dVD903JeGqDtu3b6egoCDRzRBCCCGEEEIkiS1bttChQ4dD7iPhqg6pqalA7AVMS0tLcGsalq7rfPjhh5xxxhk4nc5EN6fVkuOQHOQ4JAc5DoknxyA5yHFIDnIckkMyHYfy8nIKCgriGeFQJFzVoXooYFpaWosMVz6fj7S0tIT/orZmchySgxyH5CDHIfHkGCQHOQ7JQY5DckjG43Ak04WkoIUQQgghhBBCNAAJV0IIIYQQQgjRACRcCSGEEEIIIUQDkDlXQgghhBAtnG3bGIaBaZqJbkrS03Udh8NBOByW1yuBmvI4aJqGw+FokCWYJFwJIYQQQrRg0WiUHTt2EAwGE92UZsG2bdq2bcuWLVtkvdMEaurj4PP5aNeuHS6X65juR8KVEEIIIUQLZVkWGzduRNM08vPzcblcEhgOw7IsKisrSUlJOeyCsaLxNNVxsG2baDTK7t272bhxIz169Dimx0t4uHryySd56KGH2LlzJ8cddxyPP/44w4cPP+j+s2fPZs6cORQWFpKTk8PPfvYzZs6cicfjAcA0Te666y5efvlldu7cSX5+PpMnT+bOO++UNxMhhBBCtCrRaBTLsigoKMDn8yW6Oc2CZVlEo1E8Ho+EqwRqyuPg9XpxOp1s3rw5/phHK6Hhau7cuUydOpWnn36aESNGMHv2bMaNG8fq1atp06bNAfu/+uqr3HbbbTz//POMHDmSNWvWMHnyZBRFYdasWQA88MADzJkzh7/+9a/069ePr7/+mssuu4z09HSuu+66pn6KQgghhBAJJyFBiENrqL+RhP6lzZo1iyuvvJLLLruMvn378vTTT+Pz+Xj++efr3H/RokWMGjWKSZMm0blzZ8444wwuvPBCFi9eXGufn/70p5x55pl07tyZn/3sZ5xxxhm19hFCCCGEEEKIhpawnqtoNMqSJUu4/fbb49tUVWXMmDF8/vnndd5m5MiRvPzyyyxevJjhw4ezYcMG3n33XS6++OJa+zz77LOsWbOGnj17smzZMj799NN4z1ZdIpEIkUgkfrm8vByIVSnRdf1Yn2pSqX4+Le15NTdyHJKDHIfkIMch8eQYJIfGOA66rmPbNpZlYVlWg91vS2bbdvy7vGaJ09THwbIsbNtG13U0Tat1XX3+JhMWrvbs2YNpmuTl5dXanpeXx6pVq+q8zaRJk9izZw8nnXRSvKToNddcw+9///v4Prfddhvl5eX07t0bTdMwTZP777+fiy666KBtmTlzJnffffcB2z/88MMWOz553rx5iW6CQI5DspDjkBzkOCSeHIPk0JDHweFw0LZtWyorK4lGow12v83VwIED+fWvf82vf/3rw+5bUVHBp59+yoQJE9i0aRPp6elN0EKxv4qKiiZ5nGg0SigU4pNPPsEwjFrX1afSZsILWtTHwoUL+cMf/sBTTz3FiBEjWLduHddffz333nsv06ZNA+D111/nlVde4dVXX6Vfv358++233HDDDeTn53PppZfWeb+33347U6dOjV8uLy+noKCAM844g7S0tCZ5bk1F13XmzZvH2LFjcTqdiW5OqyXHITnIcUgOchwST45BcmiM4xAOh9myZQspKSnHNEm/qe3fc7C/6dOnM2PGjHrf71dffYXf7z/kh+e2bVNRUUFqaipjxoxh27Zt5OXlSWG0JlbzODTFax8Oh/F6vZx88skH/K1Uj2o7EgkLVzk5OWiaxq5du2pt37VrF23btq3zNtOmTePiiy/miiuuAGDAgAEEAgGuuuoq7rjjDlRV5eabb+a2227jF7/4RXyfzZs3M3PmzIOGK7fbjdvtPmC70+lssf9kWvJza07kOCQHOQ7JQY5D4skxSA4NeRxM00RRFFRVbVZFLXbs2BH/ee7cuUyfPp3Vq1fHt9Usz23bNqZp4nAc/rR2/xFTdakegqYoCh6Ph/z8/Po2P+npup70f+s1j0NT/O6qqoqiKHX+/dXntUrYX5nL5WLo0KEsWLAgvs2yLBYsWMCJJ55Y522CweABL271JxvV4zIPto+MmRVCCCGEiJ0zBaNGQr6qz9cOp23btvGv9PR0FEWJX161ahWpqam89957DB06FLfbzaeffsr69ev56U9/Sl5eHikpKRx//PHMnz+/1v127tyZ2bNnxy8risKf//xnJk6ciM/no0ePHrz99tvx6xcuXIiiKJSWlgLw4osvkpGRwQcffECfPn1ISUlh/PjxtcKgYRhcd911ZGRkkJ2dza233sqll17KOeecc9Dnu3nzZiZMmEBmZiZ+v59+/frx7rvvxq//4YcfOOuss0hLSyM1NZXRo0ezfv16IHb+fM8999ChQwfcbjeDBg3i/fffj99206ZNKIrC3LlzOeWUU/B4PLzyyisA/PnPf6ZPnz54PB569+7NU089dUTHRxxcQocFTp06lUsvvZRhw4YxfPhwZs+eTSAQ4LLLLgPgkksuoX379sycOROACRMmMGvWLAYPHhwfFjht2jQmTJgQD1kTJkzg/vvvp2PHjvTr149vvvmGWbNm8atf/Sphz1MIIYQQIlmEdJO+0z9IyGOvuGccPlfDnH7edtttPPzww3Tt2pXMzEy2bNnCT37yE+6//37cbjd/+9vfmDBhAqtXr6Zjx44HvZ+7776bBx98kIceeojHH3+ciy++mO++++6gU0OCwSAPP/wwL730Eqqq8stf/pKbbropHlgeeOABXnnlFV544QX69OnDn/70J/71r39x2mmnHbQNv/nNb4hGo3zyySf4/X5WrFhBSkoKANu2bePkk0/m1FNP5aOPPiItLY3PPvssPi/oT3/6E4888gjPPPMMgwcP5vnnn+fss8/mhx9+oEePHrVer0ceeYTBgwfHA9b06dN54oknGDx4MN988w1XXnklfr//oKO9xOElNFxdcMEF7N69m+nTp7Nz58540q7usi0sLKzVC1W9EPCdd97Jtm3byM3NjYepao8//jjTpk3j2muvpaioiPz8fK6++mqmT5/e5M9PCCGEEEI0jnvuuYexY8fGL2dlZXHcccfFL99777289dZbvP3220yZMuWg9zN58mQuvPBCAP7whz/w2GOPsWTJEjp16lTn/rqu8/TTT9OtWzcApkyZwj333BO//vHHH+f2229n4sSJADzxxBO1eqHqUlhYyHnnnceAAQMA6Nq1a/y6J598kvT0dF577bX48LSePXvGr3/44Ye59dZb41NiHnjgAf773/8ye/Zsnnzyyfh+N9xwA+eee2788owZM3jkkUfi27p06cKKFSt45plnJFwdg4QXtJgyZcpBf+EXLlxY67LD4WDGjBmHnMCYmprK7Nmza3X5CiGEEEKIGK9TY8U94xL22A1l2LBhtS5XVlZy11138c4777Bjxw4MwyAUClFYWHjI+xk4cGD8Z7/fT1paGnv27Dno/j6fLx6sANq1a0dRUREAZWVl7Nq1i+HDh8ev1zSNoUOHHnKKynXXXcevf/1rPvzwQ8aMGcN5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c+bU2v7NN9+gqiqbN28GYNasWQwYMAC/309BQQHXXnstlZWVB33u+w8LNE2TqVOnkpGRQXZ2NrfccssB/8vff/99TjrppPg+Z511FuvXr49f36VLFwAGDx6MoiiceuqpwIHDAiORCNdddx1t2rTB4/Fw0kkn8dVXX8WvX7hwIYqisGDBAoYNG4bP52PkyJGsXr36oM8nGo0yZcoU2rVrh8fjoVOnTsycOTN+fWlpKVdffTV5eXl4PB769+/Pf/7zn/j1b7zxBv369cPtdtO5c2ceeeSRWvffuXNn7r33Xi655BLS0tK46qqrAPj0008ZPXo0Xq+XgoICrrvuOgKBwEHb2RCk50o0GNu2KQ8blAV1DMtKdHNEDbZtE4qahKImJcHYPyK3I9ar5a3q2VJlrS0hhGgd9CD8IT8xj/377eDyH3a3vXv38v7773P//ffj9x+4f835SRALI3/84x+ZPXs2DoeDt956i+uvv57Zs2czZswY/vOf/3DZZZfRoUMHTjvtNN544w0effRRXnvtNfr168fOnTtZtmwZAF9//TW33XYbf/3rXznppJPYu3cv//vf/+psp6qqXHjhhbz66qv8+te/jm9/5ZVXGDVqFJ06dYrv99hjj9GlSxc2bNjAtddeyy233MJTTz11RC/bI488wosvvsjzzz9Pnz59eOSRR3jrrbf40Y9+FN8nEAgwdepUBg4cSGVlJdOnT2fixIl8++23qKrK4sWLGT58OPPnz6dfv34H7dm55ZZbeOONN/jrX/9Kp06dePDBBxk3bhzr1q0jKysrvt8dd9zBI488Qm5uLtdccw2/+tWv+Oyzz+q8z8cee4y3336b119/nY4dO7Jlyxa2bNkCxALqj3/8YyoqKnj55Zfp1q0bK1asiI+4WbJkCeeffz533XUXF1xwAYsWLeLaa68lOzubyZMnxx/j4YcfZvr06cyYMQOA9evXM378eO677z6ef/55du/ezZQpU5gyZQovvPDCEb3uR0PClThmtm1TETEoDUioai5s2yasm4R1k1JiYcvlUPE4Yutt+Vzy1iCEECJx1q1bh23b9O7d+4j2nzRpEpdddln88oUXXsjkyZO59tprAeK9XQ8//DCnnXYahYWFtG3bljFjxuB0OunYsSPDhw8HoLCwEJ/Px1lnnUV6ejqdOnVi8ODBB33siy66iEceeYTCwkI6duyIZVm89tpr3HnnnfF9brjhhvjPnTt35r777uOaa6454nA1e/Zsbr/9ds4991wAnn76aT744INa+5x33nm1Lj///PPk5uayYsUK+vfvT25uLgDZ2dm0bdu2zscJBALMmTOHF198kR//+McAPPfcc8ybN4+//OUv3HzzzfF977//fk455RQAbrvtNs4880zC4TAej+eA+y0sLKRHjx6cdNJJKIoSD50A8+fPZ/HixaxcuZKePXsC0LVrVyzLory8nEcffZTTTz+dadOmAdCzZ09WrFjBQw89VCtc/ehHP+LGG2+MX77iiiu46KKL4q99jx49eOyxxzjllFOYM2dOne1sCHIGJY5adagqC+ropoSq5sy2bSK6SUQ3KQvpeJwabVLdspixEEK0RE5frAcpUY99BOo7fH3YsGG1Lq9cuTI+NKzaqFGj+NOf/gTAz3/+c2bPnk3Xrl0ZP348P/nJT5gwYQIOh4OxY8dSUFBA9+7dGT9+POPHj2fixIn4fD5eeeUVrr766vh9vvfee4wePZo+ffrw6quvctttt/Hxxx9TVFTEz3/+8/h+8+fPZ+bMmaxatYry8nIMwyAcDhMMBvH5Dv2alJWVsWPHDkaMGBHf5nA4GDZsWK3Xae3atUyfPp0vv/ySPXv2YFV94F1YWEj//v2P6HVcv349uq4zatSo+Dan08nw4cNZuXJlrX0HDhwY/7ldu3YAFBUV0bFjxwPud/LkyYwdO5ZevXoxfvx4zjrrLM444wwAvv32Wzp06BAPVvtbtWoVP/3pT2ttGzVqFLNnz8Y0TTRNAw78HVi2bBnfffcdr7zySnybbdtYlsXGjRvp06fPYV+PoyFnTuKoVIR1tpaE2FMRkWDVAoV1k22lIUJRqTwohBAtjqLEhuYl4usIiyv16NEDRVEOWrRif3UNHTyUgoICVq9ezVNPPYXX6+Xaa6/l5JNPRtd1UlNT+fjjj3nllVdo164d06dP57jjjqO0tJSzzz6bb7/9Nv5VfUJ/0UUX8eqrrwLw6quvMn78eLKzs4FYYY6zzjqLgQMH8sYbb7BkyRKefPJJIDYXqaFMmDCBvXv38txzz/Hll1/y5ZdfNvhj1FSzaEj1ED7rICOYhgwZwsaNG7n33nsJhUKcf/758XlsXq+3Qdqz/+9AZWUlV199da3jtWzZMtauXUu3bt0a5DHrIuFK1EtFWGfL3iC7JVS1eKZlx4tgCCGEEE0pKyuLcePG8eSTT9ZZgKC0tPSQt+/Tp88B838+++wz+vbtG7/s9XqZMGECjz32GAsXLuTzzz9n+fLlQKxnaMyYMTz44IN89913bNq0iY8++ojU1FS6d+8e/6oOBpMmTeL7779nyZIl/POf/+Siiy6KP86SJUuwLItHHnmEE044gZ49e7J9+5H3HKanp9OuXbt4WAIwDIMlS5bELxcXF7N69WruvPNOTj/9dPr06UNJSUmt+6meY2WaB//gtLoASM3XTtd1vvrqq1qv3dFIS0vjggsu4LnnnmPu3Lm88cYb7N27l4EDB7J161bWrFlT5+169+5d57Hs2bNnvNeqLkOGDGHFihW1jlf1V2NWEpRhgeKIVEYMSgJRCVStUEkwStgwaZPqQZOiF0IIIZrIk08+yahRoxg+fDj33HMPAwcOxDAM5s2bx5w5cw4YplbTzTffzPnnn8/gwYMZM2YM//73v3nzzTeZP38+EFu01zRNRowYgc/n4+WXX8br9dKpUyf+85//sHLlSsaOHUt2djbvvvsulmXRq1evgz5e586dGTlyJJdffjmmaXL22WfHr+vevTu6rvP4448zYcIEPvvsM55++ul6vRbXX389f/zjH+nRowe9e/dm1qxZtQJmZmYm2dnZPPvss7Rr147CwkJuu+22WvfRpk0bvF4v77//Ph06dMDj8RxQht3v9/PrX/+am2++maysLDp27MiDDz5IMBjk8ssvr1eba5o1axbt2rVj8ODBqKrKP/7xD9q2bUtGRgannHIKJ598Mueddx6zZs2ie/furFq1Ctu2GTlyJFOnTmXEiBHce++9XHDBBXz++ec88cQTh52vduutt3LCCScwZcoUrrjiCvx+PytWrGDevHk88cQTR/1cDkd6rsQhVUYMtpYEKSoPS7BqxUJRk20lMkxQCCFE0+natStLly7ltNNO48Ybb6R///6MHTuWBQsWHFD6fH/nnHMOf/rTn3j44Yfp168fzzzzDC+88EK8/HhGRgbPPfcco0aNYuDAgcyfP59///vfZGdnk5GRwb///W/GjBlDnz59ePrpp/n73/9Ov379DvmYF110EcuWLWPixIm1hrodd9xxzJo1iwceeID+/fvzyiuv1CpDfiRuvPFGLr74Yi699FJOPPFEUlNTmThxYvx6VVV57bXX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N97w7PPee+8BAG677Tav1/roo48wbty4Wj8nUoDeJIIqPYNnIiIiIlKG4sEVIMZGTZo0qcpta9as8Xqs0+mQmpqK1NTUqx5PwezyVNe0ehFUGQOVLgkRERERNXCqCK6IakyjAcyhgCmo3szoTURERET+jcEV+RdJAswhgClYBFhERERERCrB4Ir8h8kmWqu0/LclIiIiIvXhVSqpHzMAEhEREZEfYHBF6qUzAgHhzABIRERERH6BwRWpj1ZXlgHQqnRJiIiIiIiqjcEVqQczABIRERGRH2NwRcqTJJH9zxzCDIBERERE5LcYXJGymAGQiIiIiOoJXtGSMgwWwBLODIBEREREVG8wuKK6xQyARERERFRPMbiiusEMgERERERUzzG4otql0YhEFaZgZgAkIiIionqNwRXVDmYAJCIiIqIGhsEV+Z7RKroAMgMgERERETUgvPol3zFYRFClMypdEiIiIiKiOsfgim6eziiCKoNF6ZIQERERESmGwRXdOGYAJCIiIiLyYHBFNccMgERERERElTC4oupjBkAiIiIioqticEXVwwyARERERETXxCtlujZmACQiIiIiqhYGV1Q1nQGwhDMDIBERERFRNTG4Im9aHWAOBUw2pUtCRERERORXGFyRwAyAREREREQ3hcFVQydJgCmoLAOgVunSEBERERH5LQZXDZnRClhCAa1e6ZIQEREREfk9BlcNVVATwBygdCmIiIiIiOoNzgTbkOgMgDW64nciIiIiIvIZtlw1BBqtmKvKZAMcDqVLQ0RERERULzG4qs8kSSSqMIcwAyARERERUS1jcFUfMQMgEREREVGdY3BV3xgDRRdAZgAkIiIiIqpTDK7qC70ZCAgHdEalS0JERERE1CAxuPJ3OoNoqTIwrToRERERkZIYXPmryzMAEhERERGR4hhc+RtmACQiIiIiUiUGV/6CGQCJiIiIiFSNwZU/MFgASygzABIRERERqRiDK39gtCpdAiIiIiIiug6N0gUgIiIiIiKqDxhcERERERER+QCDKyIiIiIiIh9gcEVEREREROQDDK6IiIiIiIh8gMEVERERERGRDzC4IiIiIiIi8gEGV0RERERERD7A4IqIiIiIiMgHGFwRERERERH5AIMrIiIiIiIiH2BwRURERERE5AOKB1fz5s1DXFwcTCYTkpKSsHXr1mvuP3fuXLRp0wZm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tmzZguPHjyM7O/uaLSqtWrXC119/jV27dmH37t0YOXLkTbXA3Kj//d//xaxZs/DNN9/g4MGDmDx5MnJycq6Zzv3555/Hxo0bMWnSJOzatQuHDx/GN9984wmg8vPzMXr0aDz11FMYOnQoPv30UyxevBhffvklANG6ZTAY8M477+Do0aNYtmwZXn/9dZ+dU2ZmJqZOnYqDBw/is88+wzvvvHPVuhw4cCCSk5MxfPhwrFq1CsePH8fGjRvx4osvYvv27SgqKsKkSZOwZs0anDhxAhs2bMC2bds8QT4RkRoxuCIiUrnXXnut0sV/u3bt8O6772LevHlITEzE1q1bq8ykd6Nmz56N2bNnIzExEevXr8eyZcs8rQnlrU0ulwuDBw9GQkICpkyZguDgYK/xXdXx1FNPYerUqXjmmWeQkJCAFStWYNmyZWjVqlWNjvPss89Cq9Wiffv2nq5uVzNnzhyEhISgd+/eSElJwZAhQ9C1a9cavZ4vPP/88xgxYgTGjBmD5ORkz/gpk8l01ed06tQJa9euxaFDh9CvXz906dIFL7/8MmJiYgAAkydPRkBAAGbOnAlABOczZ87EY489htOnTyMiIgILFy7EF198gfbt22P27Nn461//6rNzGjNmDIqKitCzZ09MnDgRkydPvupkzJIk4YcffsAtt9yC8ePHo3Xr1njooYdw4sQJREZGQqvV4sKFCxgzZgxat26NBx54AEOHDsWrr77qs/ISEfmaJN9sB3AiIiK6aW63G+3atcMDDzzg09akunLbbbehc+fOXvODERE1NExoQUREpIATJ05g1apVuPXWW1FSUoJ//OMfOHbsGEaOHKl00YiI6AaxWyAREZECNBoNFi5ciB49eqBPnz7Yu3cvfvzxR44pIiLyY+wWSERERERE5ANsuSIiIiIiIvIBBldEREREREQ+wOCKiIiIiIjIBxhcERERERER+QCDKyIiIiIiIh9gcEVEREREROQDDK6IiIiIiIh8gMEVERERERGRD/x/cc5X9aKPUJwAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}